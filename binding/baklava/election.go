// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package baklava

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ElectionABI is the input ABI used to generate the binding from.
const ElectionABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"validatorSignerAddressFromCurrentSet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"lesser\",\"type\":\"address\"},{\"name\":\"greater\",\"type\":\"address\"}],\"name\":\"distributeEpochRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"activate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getActiveVotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"blsKey\",\"type\":\"bytes\"},{\"name\":\"blsPop\",\"type\":\"bytes\"}],\"name\":\"checkProofOfPossession\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"hasActivatablePendingVotes\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"electValidatorSigners\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"getNumVotesReceivable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTotalVotesForGroupByAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getEpochNumberOfBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxNumGroupsVotedFor\",\"type\":\"uint256\"}],\"name\":\"setMaxNumGroupsVotedFor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentValidatorSigners\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getGroupsVotedForByAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"header\",\"type\":\"bytes\"}],\"name\":\"getVerifiedSealBitmapFromHeader\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"electabilityThreshold\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"lesser\",\"type\":\"address\"},{\"name\":\"greater\",\"type\":\"address\"}],\"name\":\"vote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"getActiveVoteUnitsForGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"validatorSignerAddressFromSet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"setElectabilityThreshold\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"header\",\"type\":\"bytes\"}],\"name\":\"hashHeader\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTotalVotesByAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"lesser\",\"type\":\"address\"},{\"name\":\"greater\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"revokeActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalVotesForEligibleValidatorGroups\",\"outputs\":[{\"name\":\"groups\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minQuorumSizeInCurrentSet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberValidatorsInCurrentSet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"header\",\"type\":\"bytes\"}],\"name\":\"getBlockNumberFromHeader\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"getGroupEligibility\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"lessers\",\"type\":\"address[]\"},{\"name\":\"greaters\",\"type\":\"address[]\"},{\"name\":\"indices\",\"type\":\"uint256[]\"}],\"name\":\"forceDecrementVotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"minElectableValidators\",\"type\":\"uint256\"},{\"name\":\"maxElectableValidators\",\"type\":\"uint256\"}],\"name\":\"electNValidatorSigners\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"getActiveVotesForGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"getPendingVotesForGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalVotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEpochNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"numberValidatorsInSet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getPendingVotesForGroupByAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"lesser\",\"type\":\"address\"},{\"name\":\"greater\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"revokePending\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"lesser\",\"type\":\"address\"},{\"name\":\"greater\",\"type\":\"address\"}],\"name\":\"markGroupEligible\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getActiveVoteUnitsForGroupByAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEligibleValidatorGroups\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"markGroupIneligible\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"registryAddress\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxNumGroupsVotedFor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getElectabilityThreshold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getActiveVotesForGroupByAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"}],\"name\":\"getTotalVotesForGroup\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEpochSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"minQuorumSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"canReceiveVotes\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"aNumerator\",\"type\":\"uint256\"},{\"name\":\"aDenominator\",\"type\":\"uint256\"},{\"name\":\"bNumerator\",\"type\":\"uint256\"},{\"name\":\"bDenominator\",\"type\":\"uint256\"},{\"name\":\"exponent\",\"type\":\"uint256\"},{\"name\":\"_decimals\",\"type\":\"uint256\"}],\"name\":\"fractionMulExp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"group\",\"type\":\"address\"},{\"name\":\"totalEpochRewards\",\"type\":\"uint256\"},{\"name\":\"uptimes\",\"type\":\"uint256[]\"}],\"name\":\"getGroupEpochRewards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"min\",\"type\":\"uint256\"},{\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"setElectableValidators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"registryAddress\",\"type\":\"address\"},{\"name\":\"minElectableValidators\",\"type\":\"uint256\"},{\"name\":\"maxElectableValidators\",\"type\":\"uint256\"},{\"name\":\"_maxNumGroupsVotedFor\",\"type\":\"uint256\"},{\"name\":\"_electabilityThreshold\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"electableValidators\",\"outputs\":[{\"name\":\"min\",\"type\":\"uint256\"},{\"name\":\"max\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getElectableValidators\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getParentSealBitmap\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"min\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ElectableValidatorsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"maxNumGroupsVotedFor\",\"type\":\"uint256\"}],\"name\":\"MaxNumGroupsVotedForSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"electabilityThreshold\",\"type\":\"uint256\"}],\"name\":\"ElectabilityThresholdSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"group\",\"type\":\"address\"}],\"name\":\"ValidatorGroupMarkedEligible\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"group\",\"type\":\"address\"}],\"name\":\"ValidatorGroupMarkedIneligible\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"group\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ValidatorGroupVoteCast\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"group\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"units\",\"type\":\"uint256\"}],\"name\":\"ValidatorGroupVoteActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"group\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ValidatorGroupPendingVoteRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"group\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"units\",\"type\":\"uint256\"}],\"name\":\"ValidatorGroupActiveVoteRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"group\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"EpochRewardsDistributedToVoters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"registryAddress\",\"type\":\"address\"}],\"name\":\"RegistrySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]"

// ElectionBin is the compiled bytecode used for deploying new contracts.
var ElectionBin = "$296f8ad1e63f27bda171ef8e485dd1febd$__916302f1302891604480820192602092909190829003018186803b158015611b9f57600080fd5b505af4158015611bb3573d6000803e3d6000fd5b505050506040513d6020811015611bc957600080fd5b50511515611c21576040805160e560020a62461bcd02815260206004820152601260248201527f47726f7570206e6f7420656c696769626c650000000000000000000000000000604482015290519081900360640190fd5b60008511611c67576040805160e560020a62461bcd02815260206004820152601960248201526000805160206168ae833981519152604482015290519081900360640190fd5b611c718686614565565b1515611cc7576040805160e560020a62461bcd02815260206004820152601a60248201527f47726f75702063616e6e6f74207265636569766520766f746573000000000000604482015290519081900360640190fd5b6000611cd16150a7565b600160a060020a0316636642d594336040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b158015611d2957600080fd5b505afa158015611d3d573d6000803e3d6000fd5b505050506040513d6020811015611d5357600080fd5b5051600160a060020a0381166000908152600c6020526040812091925090815b8154811015611dcc578280611db2575089600160a060020a03168282815481101515611d9b57fe5b600091825260209091200154600160a060020a0316145b9250611dc581600163ffffffff6153dd16565b9050611d73565b50811515611e6757600f54815410611e2e576040805160e560020a62461bcd02815260206004820152601960248201527f566f74656420666f7220746f6f206d616e792067726f75707300000000000000604482015290519081900360640190fd5b805460018101825560008281526020902001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038b161790555b611e7289848a61558f565b611e7e89898989615616565b611e866152b7565b600160a060020a03166318a4ff8c848a6040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050600060405180830381600087803b158015611ee857600080fd5b505af1158015611efc573d6000803e3d6000fd5b5050604080518b81529051600160a060020a03808e169450871692507fd3532f70444893db82221041edb4dc26c94593aeb364b0b14dfc77d5ee9051529181900360200190a3600194505050506001548114611f90576040805160e560020a62461bcd02815260206004820152600e6024820152600080516020616937833981519152604482015290519081900360640190fd5b50949350505050565b600160a060020a031660009081526006602052604090206001015490565b6040805160208082018590528183018490528251808303840181526060928301938490528051600094859360fa939282918401908083835b6020831061200e5780518252601f199092019160209182019101611fef565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d806000811461206e576040519150601f19603f3d011682016040523d82523d6000602084013e612073565b606091505b50925090508015156120b95760405160e560020a62461bcd028152600401808060200182810382526036815260200180616acf6036913960400191505060405180910390fd5b6117bb826000614e23565b60006120ce613039565b1515612112576040805160e560020a62461bcd0281526020600482018190526024820152600080516020616b26833981519152604482015290519081900360640190fd5b61211b8261574e565b5160105561214661212a615768565b604080516020810190915260105481529063ffffffff61578c16565b15156121865760405160e560020a62461bcd02815260040180806020018281038252602e81526020018061699e602e913960400191505060405180910390fd5b6040805183815290517f9854be03126e38f9c318d8aabe1b150d09cb3a57059b21855b1e11d44e082c1a9181900360200190a1506001919050565b60006060600060f6600160a060020a0316846040516020018082805190602001908083835b602083106122055780518252601f1990920191602091820191016121e6565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083106122685780518252601f199092019160209182019101612249565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d80600081146122c8576040519150601f19603f3d011682016040523d82523d6000602084013e6122cd565b606091505b5092509050801515611b1c5760405160e560020a62461bcd028152600401808060200182810382526023815260200180616c886023913960400191505060405180910390fd5b600160a060020a0381166000908152600c602090815260408083208054825181850281018501909352808352849360609392919083018282801561238057602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311612362575b50939450600093505050505b81518110156123e0576123c66123b983838151811015156123a957fe5b906020019060200201518761178e565b849063ffffffff6153dd16565b92506123d981600163ffffffff6153dd16565b905061238c565b50909392505050565b60018054810190819055600090600160a060020a0387161515612456576040805160e560020a62461bcd02815260206004820152601260248201527f47726f75702061646472657373207a65726f0000000000000000000000000000604482015290519081900360640190fd5b60006124606150a7565b600160a060020a0316636642d594336040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b1580156124b857600080fd5b505afa1580156124cc573d6000803e3d6000fd5b505050506040513d60208110156124e257600080fd5b505190506000871161252c576040805160e560020a62461bcd02815260206004820152601960248201526000805160206168ae833981519152604482015290519081900360640190fd5b61253688826143d2565b8711156125775760405160e560020a62461bcd028152600401808060200182810382526023815260200180616a3a6023913960400191505060405180910390fd5b600061258489838a615793565b90506125928989898961588f565b61259a6152b7565b600160a060020a0316636edf77a5838a6040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050600060405180830381600087803b1580156125fc57600080fd5b505af1158015612610573d6000803e3d6000fd5b5050505061261e898361178e565b151561264757600160a060020a0382166000908152600c60205260409020612647908a876159df565b88600160a060020a031682600160a060020a03167fae7458f8697a680da6be36406ea0b8f40164915ac9cc40c0dad05a2ff6e8c6a88a84604051808381526020018281526020019250505060405180910390a360019350505060015481146126e7576040805160e560020a62461bcd02815260206004820152600e6024820152600080516020616937833981519152604482015290519081900360640190fd5b5095945050505050565b604080517f69b317e3000000000000000000000000000000000000000000000000000000008152600760048201529051606091829173__$296f8ad1e63f27bda171ef8e485dd1febd$__916369b317e3916024808301926000929190829003018186803b15801561276157600080fd5b505af4158015612775573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604090815281101561279e57600080fd5b8101908080516401000000008111156127b657600080fd5b820160208101848111156127c957600080fd5b81518560208202830111640100000000821117156127e657600080fd5b5050929190602001805164010000000081111561280257600080fd5b8201602081018481111561281557600080fd5b815185602082028301116401000000008211171561283257600080fd5b509496509450505050509091565b612848613039565b151561288c576040805160e560020a62461bcd0281526020600482018190526024820152600080516020616b26833981519152604482015290519081900360640190fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b60006115d843614533565b6002546101009004600160a060020a031681565b60006060600060f9600160a060020a031643604051602001808281526020019150506040516020818303038152906040526040518082805190602001908083835b602083106129625780518252601f199092019160209182019101612943565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d80600081146129c2576040519150601f19603f3d011682016040523d82523d6000602084013e6129c7565b606091505b5092509050801515612a0d5760405160e560020a62461bcd028152600401808060200182810382526035815260200180616a9a6035913960400191505060405180910390fd5b612a18826000614e23565b9250505090565b60006060600060f7600160a060020a0316846040516020018082805190602001908083835b60208310612a635780518252601f199092019160209182019101612a44565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310612ac65780518252601f199092019160209182019101612aa7565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d8060008114612b26576040519150601f19603f3d011682016040523d82523d6000602084013e612b2b565b606091505b509250905080151561113b5760405160e560020a62461bcd028152600401808060200182810382526031815260200180616c056031913960400191505060405180910390fd5b6040805160e360020a625e260502815260076004820152600160a060020a0383166024820152905160009173__$296f8ad1e63f27bda171ef8e485dd1febd$__916302f1302891604480820192602092909190829003018186803b158015612bd857600080fd5b505af4158015612bec573d6000803e3d6000fd5b505050506040513d6020811015612c0257600080fd5b505192915050565b600054600160a060020a031690565b60018054810190819055604080517f4c6f636b6564476f6c64000000000000000000000000000000000000000000006020808301919091528251808303600a018152602a830180855281519183019190912060025460e060020a63dcf0aaed02909252602e8401819052935160009594933393610100909304600160a060020a03169263dcf0aaed92604e80840193829003018186803b158015612cbc57600080fd5b505afa158015612cd0573d6000803e3d6000fd5b505050506040513d6020811015612ce657600080fd5b5051600160a060020a031614612d46576040805160e560020a62461bcd02815260206004820152601860248201527f6f6e6c79207265676973746572656420636f6e74726163740000000000000000604482015290519081900360640190fd5b60008a11612d885760405160e560020a62461bcd028152600401808060200182810382526027815260200180616c616027913960400191505060405180910390fd5b612d9061683c565b60408051600160a060020a038e166000908152600c602090815290839020805460609281028401830185529383018481529293849392840182828015612dff57602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311612de1575b50505091835250506020018c90528051519091508911801590612e2157508887145b8015612e2c57508685145b1515612e6c5760405160e560020a62461bcd02815260040180806020018281038252602181526020018061697d6021913960400191505060405180910390fd5b8051515b6000811115612f70578151612f4690612f35908f90612e9685600163ffffffff615b0316565b81518110612ea057fe5b6020908102909101810151908601518f8f612ec288600163ffffffff615b0316565b818110612ecb57fe5b90506020020135600160a060020a03168e8e612ef160018a615b0390919063ffffffff16565b818110612efa57fe5b90506020020135600160a060020a03168d8d612f2060018b615b0390919063ffffffff16565b818110612f2957fe5b90506020020135615b45565b60208401519063ffffffff615b0316565b602083018190521515612f5857612f70565b612f6981600163ffffffff615b0316565b9050612e70565b50602081015115612fcb576040805160e560020a62461bcd02815260206004820152601f60248201527f4661696c75726520746f2064656372656d656e7420616c6c20766f7465732e00604482015290519081900360640190fd5b6020810151612fe1908c9063ffffffff615b0316565b93505050600154811461302c576040805160e560020a62461bcd02815260206004820152600e6024820152600080516020616937833981519152604482015290519081900360640190fd5b5098975050505050505050565b60008054600160a060020a031661304e615ce8565b600160a060020a031614905090565b6060600061309861309361307761307261392d565b615cec565b604080516020810190915260105481529063ffffffff615d5d16565b6160ef565b604080517f42b6351a000000000000000000000000000000000000000000000000000000008152600760048201526024810183905260448101869052905191925060009173__$296f8ad1e63f27bda171ef8e485dd1febd$__916342b6351a916064808301926020929190829003018186803b15801561311757600080fd5b505af415801561312b573d6000803e3d6000fd5b505050506040513d602081101561314157600080fd5b5051604080517fdcb2a4dd0000000000000000000000000000000000000000000000000000000081526007600482015260248101839052905191925060609173__$296f8ad1e63f27bda171ef8e485dd1febd$__9163dcb2a4dd916044808301926000929190829003018186803b1580156131bb57600080fd5b505af41580156131cf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156131f857600080fd5b81019080805164010000000081111561321057600080fd5b8201602081018481111561322357600080fd5b815185602082028301116401000000008211171561324057600080fd5b50509291905050509050606061325461534a565b600160a060020a03166370447754836040518263ffffffff1660e060020a0281526004018080602001828103825283818151815260200191508051906020019060200280838360005b838110156132b557818101518382015260200161329d565b505050509050019250505060006040518083038186803b1580156132d857600080fd5b505afa1580156132ec573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561331557600080fd5b81019080805164010000000081111561332d57600080fd5b8201602081018481111561334057600080fd5b815185602082028301116401000000008211171561335d57600080fd5b5050929190505050905060608251604051908082528060200260200182016040528015613394578160200160208202803883390190505b5090506000809050606084516040519080825280602002602001820160405280156133c9578160200160208202803883390190505b5090506060855160405190808252806020026020018201604052801561340957816020015b6133f6616854565b8152602001906001900390816133ee5790505b50905060005b865181101561350d5780838281518110151561342757fe5b6020908102909101015286516134ed9073__$296f8ad1e63f27bda171ef8e485dd1febd$__9063e0fe44b3906007908b908690811061346257fe5b906020019060200201516040518363ffffffff1660e060020a0281526004018083815260200182600160a060020a0316600160a060020a031681526020019250505060206040518083038186803b1580156134bc57600080fd5b505af41580156134d0573d6000803e3d6000fd5b505050506040513d60208110156134e657600080fd5b5051615cec565b82828151811015156134fb57fe5b6020908102909101015260010161340f565b505b898310801561351f575060008651115b1561369c57600082600081518110151561353557fe5b906020019060200201519050613561828281518110151561355257fe5b90602001906020020151616100565b151561356d575061369c565b848181518110151561357b57fe5b90602001906020020151868281518110151561359357fe5b60209081029091010151116135c9576135ac600061574e565b82828151811015156135ba57fe5b6020908102909101015261368c565b6135f2600186838151811015156135dc57fe5b602090810290910101519063ffffffff6153dd16565b858281518110151561360057fe5b6020908102909101015261361b84600163ffffffff6153dd16565b9350613673613636613072600188858151811015156135dc57fe5b88516136679073__$296f8ad1e63f27bda171ef8e485dd1febd$__9063e0fe44b3906007908d908890811061346257fe5b9063ffffffff61610416565b828281518110151561368157fe5b602090810290910101525b61369683836161f3565b5061350f565b8a8310156136f4576040805160e560020a62461bcd02815260206004820152601d60248201527f4e6f7420656e6f75676820656c65637465642076616c696461746f7273000000604482015290519081900360640190fd5b606083604051908082528060200260200182016040528015613720578160200160208202803883390190505b50600094509050835b87518110156138e757606061373c61534a565b600160a060020a0316638dd31e398a8481518110151561375857fe5b90602001906020020151898581518110151561377057fe5b906020019060200201516040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a031681526020018281526020019250505060006040518083038186803b1580156137ca57600080fd5b505afa1580156137de573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561380757600080fd5b81019080805164010000000081111561381f57600080fd5b8201602081018481111561383257600080fd5b815185602082028301116401000000008211171561384f57600080fd5b50909450600093505050505b81518110156138cc57818181518110151561387257fe5b90602001906020020151848881518110151561388a57fe5b600160a060020a039092166020928302909101909101526138b287600163ffffffff6153dd16565b96506138c581600163ffffffff6153dd16565b905061385b565b506138e0905081600163ffffffff6153dd16565b9050613729565b509b9a5050505050505050505050565b600160a060020a031660009081526006602052604090205490565b600160a060020a031660009081526004602052604090205490565b6003546005546000916115d8919063ffffffff6153dd16565b60006115d8436117c4565b60006060600060f9600160a060020a031684604051602001808281526020019150506040516020818303038152906040526040518082805190602001908083835b602083106139b15780518252601f199092019160209182019101613992565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d8060008114613a11576040519150601f19603f3d011682016040523d82523d6000602084013e613a16565b606091505b509250905080151561113b5760405160e560020a62461bcd02815260040180806020018281038252602e815260200180616909602e913960400191505060405180910390fd5b600160a060020a0391821660009081526004602090815260408083209390941682526001909201909152205490565b60018054810190819055600090600160a060020a0387161515613af8576040805160e560020a62461bcd02815260206004820152601260248201527f47726f75702061646472657373207a65726f0000000000000000000000000000604482015290519081900360640190fd5b6000613b026150a7565b600160a060020a0316636642d594336040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b158015613b5a57600080fd5b505afa158015613b6e573d6000803e3d6000fd5b505050506040513d6020811015613b8457600080fd5b5051905060008711613bce576040805160e560020a62461bcd02815260206004820152601960248201526000805160206168ae833981519152604482015290519081900360640190fd5b613bd88882613a5c565b871115613c195760405160e560020a62461bcd028152600401808060200182810382526024815260200180616b926024913960400191505060405180910390fd5b613c2488828961516b565b613c308888888861588f565b613c386152b7565b600160a060020a0316636edf77a582896040518363ffffffff1660e060020a0281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050600060405180830381600087803b158015613c9a57600080fd5b505af1158015613cae573d6000803e3d6000fd5b50505050613cbc888261178e565b1515613ce557600160a060020a0381166000908152600c60205260409020613ce59089866159df565b87600160a060020a031681600160a060020a03167f148075455e24d5cf538793db3e917a157cbadac69dd6a304186daf11b23f76fe896040518082815260200191505060405180910390a3600192505060015481146126e7576040805160e560020a62461bcd02815260206004820152600e6024820152600080516020616937833981519152604482015290519081900360640190fd5b604080517f56616c696461746f7273000000000000000000000000000000000000000000006020808301919091528251808303600a018152602a830180855281519183019190912060025460e060020a63dcf0aaed02909252602e840181905293513393610100909204600160a060020a03169263dcf0aaed92604e8082019391829003018186803b158015613e1157600080fd5b505afa158015613e25573d6000803e3d6000fd5b505050506040513d6020811015613e3b57600080fd5b5051600160a060020a031614613e9b576040805160e560020a62461bcd02815260206004820152601860248201527f6f6e6c79207265676973746572656420636f6e74726163740000000000000000604482015290519081900360640190fd5b6000613ea685614410565b604080517f2dedbbf000000000000000000000000000000000000000000000000000000000815260076004820152600160a060020a03808916602483015260448201849052808816606483015286166084820152905191925073__$296f8ad1e63f27bda171ef8e485dd1febd$__91632dedbbf09160a480820192600092909190829003018186803b158015613f3b57600080fd5b505af4158015613f4f573d6000803e3d6000fd5b5050604051600160a060020a03881692507f8f21dc7ff6f55d73e4fca52a4ef4fcc14fbda43ac338d24922519d51455d39c19150600090a25050505050565b600160a060020a0391821660009081526006602090815260408083209390941682526002909201909152205490565b604080517f3a72e80200000000000000000000000000000000000000000000000000000000815260076004820152905160609173__$296f8ad1e63f27bda171ef8e485dd1febd$__91633a72e80291602480820192600092909190829003018186803b15801561402c57600080fd5b505af4158015614040573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561406957600080fd5b81019080805164010000000081111561408157600080fd5b8201602081018481111561409457600080fd5b81518560208202830111640100000000821117156140b157600080fd5b509094505050505090565b604080517f56616c696461746f7273000000000000000000000000000000000000000000006020808301919091528251808303600a018152602a830180855281519183019190912060025460e060020a63dcf0aaed02909252602e840181905293513393610100909204600160a060020a03169263dcf0aaed92604e8082019391829003018186803b15801561415157600080fd5b505afa158015614165573d6000803e3d6000fd5b505050506040513d602081101561417b57600080fd5b5051600160a060020a0316146141db576040805160e560020a62461bcd02815260206004820152601860248201527f6f6e6c79207265676973746572656420636f6e74726163740000000000000000604482015290519081900360640190fd5b604080517f2813592900000000000000000000000000000000000000000000000000000000815260076004820152600160a060020a0384166024820152905173__$296f8ad1e63f27bda171ef8e485dd1febd$__916328135929916044808301926000929190829003018186803b15801561425557600080fd5b505af4158015614269573d6000803e3d6000fd5b5050604051600160a060020a03851692507f5c8cd4e832f3a7d79f9208c2acf25a412143aa3f751cfd3728c42a0fea4921a89150600090a25050565b6142ad613039565b15156142f1576040805160e560020a62461bcd0281526020600482018190526024820152600080516020616b26833981519152604482015290519081900360640190fd5b600160a060020a0381161515614351576040805160e560020a62461bcd02815260206004820181905260248201527f43616e6e6f7420726567697374657220746865206e756c6c2061646472657373604482015290519081900360640190fd5b6002805474ffffffffffffffffffffffffffffffffffffffff001916610100600160a060020a038416908102919091179091556040517f27fe5f0c1c3b1ed427cc63d0f05759ffdecf9aec9e18d31ef366fc8a6cb5dc3b90600090a250565b600f5481565b604080516020810190915260105481526000906115d890616100565b600160a060020a03828116600090815260066020908152604080832093851683526002909301905290812054614409908490616205565b9392505050565b600160a060020a03811660009081526006602090815260408083205460049092528220546115c09163ffffffff6153dd16565b604080516000808252602082019283905281519092606092849260f89290819081908082805b602083106144885780518252601f199092019160209182019101614469565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d80600081146144e8576040519150601f19603f3d011682016040523d82523d6000602084013e6144ed565b606091505b5092509050801515612a0d5760405160e560020a62461bcd028152600401808060200182810382526025815260200180616b6d6025913960400191505060405180910390fd5b60006115c06003614559600261454d60026116ef88613951565b9063ffffffff6153dd16565b9063ffffffff6154b016565b6000806145758361454d86614410565b9050600061459a61458d600d6001015461171061534a565b839063ffffffff61543a16565b905060006146756145a96152b7565b600160a060020a03166330a61d596040518163ffffffff1660e060020a02815260040160206040518083038186803b1580156145e457600080fd5b505afa1580156145f8573d6000803e3d6000fd5b505050506040513d602081101561460e57600080fd5b50516116ef600161461d61534a565b600160a060020a03166339e618e88b6040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b1580156116b757600080fd5b9091111595945050505050565b600080861580159061469357508415155b15156146e9576040805160e560020a62461bcd02815260206004820152601560248201527f612064656e6f6d696e61746f72206973207a65726f0000000000000000000000604482015290519081900360640190fd5b6000806000606060fc600160a060020a03168c8c8c8c8c8c6040516020018087815260200186815260200185815260200184815260200183815260200182815260200196505050505050506040516020818303038152906040526040518082805190602001908083835b602083106147725780518252601f199092019160209182019101614753565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d80600081146147d2576040519150601f19603f3d011682016040523d82523d6000602084013e6147d7565b606091505b50909250905081151561481e5760405160e560020a62461bcd028152600401808060200182810382526027815260200180616b466027913960400191505060405180910390fd5b614829816000614e23565b9350614836816020614e23565b939c939b50929950505050505050505050565b60008061485461534a565b905080600160a060020a031663c54c1cd4876040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b1580156148af57600080fd5b505afa1580156148c3573d6000803e3d6000fd5b505050506040513d60208110156148d957600080fd5b505115806148ea5750600554600010155b156148f9576000915050611146565b614901616854565b600160a060020a038716600090815260066020526040902054600554614927919061626b565b9050614931616854565b6149da83600160a060020a03166376f7425d88886040518363ffffffff1660e060020a02815260040180806020018281038252848482818152602001925060200280828437600083820152604051601f909101601f191690920195506020945090925050508083038186803b1580156149a957600080fd5b505afa1580156149bd573d6000803e3d6000fd5b505050506040513d60208110156149d357600080fd5b505161574e565b90506149e4616854565b614a4084600160a060020a031663dba94fcd8b6040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a0316815260200191505060206040518083038186803b1580156149a957600080fd5b9050614a6661309382614a5a85614a5a88614a5a8f615cec565b9063ffffffff615d5d16565b9998505050505050505050565b614a7b613039565b1515614abf576040805160e560020a62461bcd0281526020600482018190526024820152600080516020616b26833981519152604482015290519081900360640190fd5b614ac8816162a3565b50565b6000614ad5613039565b1515614b19576040805160e560020a62461bcd0281526020600482018190526024820152600080516020616b26833981519152604482015290519081900360640190fd5b60008311614b5b5760405160e560020a62461bcd02815260040180806020018281038252602b815260200180616c36602b913960400191505060405180910390fd5b81831115614b9d5760405160e560020a62461bcd02815260040180806020018281038252603b8152602001806168ce603b913960400191505060405180910390fd5b600d5483141580614bb05750600e548214155b1515614c06576040805160e560020a62461bcd02815260206004820181905260248201527f456c65637461626c652076616c696461746f7273206e6f74206368616e676564604482015290519081900360640190fd5b6040805180820182528481526020908101849052600d859055600e849055815185815290810184905281517fb3ae64819ff89f6136eb58b8563cb32c6550f17eaf97f9ecc32f23783229f6de929181900390910190a150600192915050565b60025460ff1615614cc0576040805160e560020a62461bcd02815260206004820152601c60248201527f636f6e747261637420616c726561647920696e697469616c697a656400000000604482015290519081900360640190fd5b6002805460ff19166001179055614cd6336162a3565b614cdf856142a5565b614ce98484614acb565b50614cf3826117d7565b50614cfd816120c4565b505050505050565b600d54600e5482565b600d54600e549091565b60006060600060f5600160a060020a031684604051602001808281526020019150506040516020818303038152906040526040518082805190602001908083835b60208310614d785780518252601f199092019160209182019101614d59565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d8060008114614dd8576040519150601f19603f3d011682016040523d82523d6000602084013e614ddd565b606091505b5092509050801515611b1c5760405160e560020a62461bcd02815260040180806020018281038252602c815260200180616bd9602c913960400191505060405180910390fd5b60006144098383615526565b6040805160e360020a625e260502815260076004820152600160a060020a0386166024820152905173__$296f8ad1e63f27bda171ef8e485dd1febd$__916302f13028916044808301926020929190829003018186803b158015614e9257600080fd5b505af4158015614ea6573d6000803e3d6000fd5b505050506040513d6020811015614ebc57600080fd5b50511561500a57604080517fe0fe44b300000000000000000000000000000000000000000000000000000000815260076004820152600160a060020a03861660248201529051600091614f5b91869173__$296f8ad1e63f27bda171ef8e485dd1febd$__9163e0fe44b391604480820192602092909190829003018186803b158015614f4757600080fd5b505af41580156116cb573d6000803e3d6000fd5b604080517fcab455ae00000000000000000000000000000000000000000000000000000000815260076004820152600160a060020a03808916602483015260448201849052808716606483015285166084820152905191925073__$296f8ad1e63f27bda171ef8e485dd1febd$__9163cab455ae9160a480820192600092909190829003018186803b158015614ff057600080fd5b505af4158015615004573d6000803e3d6000fd5b50505050505b600160a060020a038416600090815260066020526040902054615033908463ffffffff6153dd16565b600160a060020a03851660009081526006602052604090205560055461505f908463ffffffff6153dd16565b600555604080518481529051600160a060020a038616917f91ba34d62474c14d6c623cd322f4256666c7a45b7fdaa3378e009d39dfcec2a7919081900360200190a250505050565b600254604080517f4163636f756e7473000000000000000000000000000000000000000000000000602080830191909152825160088184030181526028830180855281519183019190912060e060020a63dcf0aaed02909152602c83015291516000936101009004600160a060020a03169263dcf0aaed92604c8082019391829003018186803b15801561513a57600080fd5b505afa15801561514e573d6000803e3d6000fd5b505050506040513d602081101561516457600080fd5b5051905090565b6003805461517f908363ffffffff615b0316565b8155600160a060020a0384166000908152600182016020526040902080546151ad908463ffffffff615b0316565b8155600160a060020a0384166000908152600182016020526040902080546151db908563ffffffff615b0316565b8082551515614cfd5760006001820155505050505050565b600580546000919061520b908463ffffffff6153dd16565b815560006152198685616355565b600160a060020a03871660009081526001840160205260409020805491925090615249908663ffffffff6153dd16565b81556001810154615260908363ffffffff6153dd16565b6001820155600160a060020a0386166000908152600282016020526040902054615290908363ffffffff6153dd16565b600160a060020a038716600090815260029092016020526040909120559150509392505050565b600254604080517f4c6f636b6564476f6c64000000000000000000000000000000000000000000006020808301919091528251600a818403018152602a830180855281519183019190912060e060020a63dcf0aaed02909152602e83015291516000936101009004600160a060020a03169263dcf0aaed92604e8082019391829003018186803b15801561513a57600080fd5b600254604080517f56616c696461746f7273000000000000000000000000000000000000000000006020808301919091528251600a818403018152602a830180855281519183019190912060e060020a63dcf0aaed02909152602e83015291516000936101009004600160a060020a03169263dcf0aaed92604e8082019391829003018186803b15801561513a57600080fd5b600082820183811015614409576040805160e560020a62461bcd02815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600082151561544b575060006115c0565b82820282848281151561545a57fe5b04146144095760405160e560020a62461bcd028152600401808060200182810382526021815260200180616b056021913960400191505060405180910390fd5b60008183106154a95781614409565b5090919050565b600061440983836040805190810160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506163c0565b600080828481151561550057fe5b049050828481151561550e57fe5b06151561551c5790506115c0565b60010190506115c0565b600081602001835110151515615586576040805160e560020a62461bcd02815260206004820152601460248201527f736c6963696e67206f7574206f662072616e6765000000000000000000000000604482015290519081900360640190fd5b50016020015190565b600380546155a3908363ffffffff6153dd16565b8155600160a060020a0384166000908152600182016020526040902080546155d1908463ffffffff6153dd16565b8155600160a060020a0384166000908152600182016020526040902080546155ff908563ffffffff6153dd16565b8155615609613946565b6001909101555050505050565b604080517fe0fe44b300000000000000000000000000000000000000000000000000000000815260076004820152600160a060020a0386166024820152905160009161569a91869173__$296f8ad1e63f27bda171ef8e485dd1febd$__9163e0fe44b391604480820192602092909190829003018186803b158015614f4757600080fd5b604080517fcab455ae00000000000000000000000000000000000000000000000000000000815260076004820152600160a060020a03808916602483015260448201849052808716606483015285166084820152905191925073__$296f8ad1e63f27bda171ef8e485dd1febd$__9163cab455ae9160a480820192600092909190829003018186803b15801561572f57600080fd5b505af4158015615743573d6000803e3d6000fd5b505050505050505050565b615756616854565b50604080516020810190915290815290565b615770616854565b50604080516020810190915269d3c21bcecceda1000000815290565b5190511090565b60058054600091906157ab908463ffffffff615b0316565b81556000806157ba87876143d2565b600160a060020a038816600090815260018501602052604090209091508582141561580157600160a060020a0387166000908152600282016020526040902054925061580e565b61580b8887616355565b92505b8054615820908763ffffffff615b0316565b81556001810154615837908463ffffffff615b0316565b6001820155600160a060020a0387166000908152600282016020526040902054615867908463ffffffff615b0316565b600160a060020a03881660009081526002909201602052604090912055509150509392505050565b6040805160e360020a625e260502815260076004820152600160a060020a0386166024820152905173__$296f8ad1e63f27bda171ef8e485dd1febd$__916302f13028916044808301926020929190829003018186803b1580156158f257600080fd5b505af4158015615906573d6000803e3d6000fd5b505050506040513d602081101561591c57600080fd5b5051156111b057604080517fe0fe44b300000000000000000000000000000000000000000000000000000000815260076004820152600160a060020a0386166024820152905160009161569a91869173__$296f8ad1e63f27bda171ef8e485dd1febd$__9163e0fe44b391604480820192602092909190829003018186803b1580156159a757600080fd5b505af41580156159bb573d6000803e3d6000fd5b505050506040513d60208110156159d157600080fd5b50519063ffffffff615b0316565b825481108015615a19575081600160a060020a03168382815481101515615a0257fe5b600091825260209091200154600160a060020a0316145b1515615a6f576040805160e560020a62461bcd02815260206004820152600960248201527f42616420696e6465780000000000000000000000000000000000000000000000604482015290519081900360640190fd5b8254600090615a8590600163ffffffff615b0316565b90508381815481101515615a9557fe5b6000918252602090912001548454600160a060020a0390911690859084908110615abb57fe5b6000918252602090912001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905580615afc8582616866565b5050505050565b600061440983836040805190810160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250616469565b60008481615b53888a613a5c565b90506000811115615bd6576000615b6a838361549a565b9050615b77898b8361516b565b88600160a060020a03168a600160a060020a03167f148075455e24d5cf538793db3e917a157cbadac69dd6a304186daf11b23f76fe836040518082815260200191505060405180910390a3615bd2838263ffffffff615b0316565b9250505b6000615be2898b6143d2565b9050600081118015615bf45750600083115b15615c7e576000615c05848361549a565b90506000615c148b8d84615793565b90508a600160a060020a03168c600160a060020a03167fae7458f8697a680da6be36406ea0b8f40164915ac9cc40c0dad05a2ff6e8c6a88484604051808381526020018281526020019250505060405180910390a3615c79858363ffffffff615b0316565b945050505b6000615c90898563ffffffff615b0316565b90506000811115615cda57615ca78a828a8a61588f565b615cb18a8c61178e565b1515615cda57600160a060020a038b166000908152600c60205260409020615cda908b886159df565b9a9950505050505050505050565b3390565b615cf4616854565b615cfc6164c7565b821115615d3d5760405160e560020a62461bcd028152600401808060200182810382526036815260200180616a046036913960400191505060405180910390fd5b50604080516020810190915269d3c21bcecceda100000082028152919050565b615d65616854565b82511580615d7257508151155b15615d8c57506040805160208101909152600081526115c0565b815169d3c21bcecceda10000001415615da65750816115c0565b825169d3c21bcecceda10000001415615dc05750806115c0565b600069d3c21bcecceda1000000615dd6856164e2565b51811515615de057fe5b0490506000615dee8561650d565b519050600069d3c21bcecceda1000000615e07866164e2565b51811515615e1157fe5b0490506000615e1f8661650d565b5190508382028415615e8d57828582811515615e3757fe5b0414615e8d576040805160e560020a62461bcd02815260206004820152601660248201527f6f766572666c6f77207831793120646574656374656400000000000000000000604482015290519081900360640190fd5b69d3c21bcecceda100000081028115615f0c5769d3c21bcecceda10000008282811515615eb657fe5b0414615f0c576040805160e560020a62461bcd02815260206004820152601f60248201527f6f766572666c6f772078317931202a2066697865643120646574656374656400604482015290519081900360640190fd5b9050808484028515615f7a57848682811515615f2457fe5b0414615f7a576040805160e560020a62461bcd02815260206004820152601660248201527f6f766572666c6f77207832793120646574656374656400000000000000000000604482015290519081900360640190fd5b8684028715615fe557848882811515615f8f57fe5b0414615fe5576040805160e560020a62461bcd02815260206004820152601660248201527f6f766572666c6f77207831793220646574656374656400000000000000000000604482015290519081900360640190fd5b615fed616539565b87811515615ff757fe5b049650616002616539565b8581151561600c57fe5b049450868502871561607a5785888281151561602457fe5b041461607a576040805160e560020a62461bcd02815260206004820152601660248201527f6f766572666c6f77207832793220646574656374656400000000000000000000604482015290519081900360640190fd5b616082616854565b5060408051602081810183528782528251908101909252848252906160a8908290616542565b90506160c38160206040519081016040528086815250616542565b90506160de8160206040519081016040528085815250616542565b9d9c50505050505050505050505050565b5169d3c21bcecceda1000000900490565b5190565b61610c616854565b81511515616164576040805160e560020a62461bcd02815260206004820152601160248201527f63616e2774206469766964652062792030000000000000000000000000000000604482015290519081900360640190fd5b825169d3c21bcecceda100000081810291908204146161cd576040805160e560020a62461bcd02815260206004820152601260248201527f6f766572666c6f77206174206469766964650000000000000000000000000000604482015290519081900360640190fd5b6020604051908101604052808460000151838115156161e857fe5b049052949350505050565b6162018282600085516165be565b5050565b600160a060020a038216600090815260066020526040812060010154151561622f575060006115c0565b600160a060020a038316600090815260066020526040902060018101549054616264919061455990859063ffffffff61543a16565b90506115c0565b616273616854565b61627b616854565b61628484615cec565b905061628e616854565b61629784615cec565b90506117bb8282616104565b600160a060020a03811615156162ed5760405160e560020a62461bcd0281526004018080602001828103825260268152602001806169576026913960400191505060405180910390fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a0382166000908152600660205260408120600101541515616390576162648268056bc75e2d6310000063ffffffff61543a16565b600160a060020a03831660009081526006602052604090208054600190910154616264919061455990859061543a565b6000818184116164515760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b838110156164165781810151838201526020016163fe565b50505050905090810190601f1680156164435780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581151561645f57fe5b0495945050505050565b600081848411156164bf5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156164165781810151838201526020016163fe565b505050900390565b7601357c299a88ea76a58924d52ce4f26a85af186c2b9e7490565b6164ea616854565b506040805160208101909152905169d3c21bcecceda10000009081900402815290565b616515616854565b506040805160208101909152905169d3c21bcecceda1000000808204029003815290565b64e8d4a5100090565b61654a616854565b81518351908101908110156165a9576040805160e560020a62461bcd02815260206004820152601560248201527f616464206f766572666c6f772064657465637465640000000000000000000000604482015290519081900360640190fd5b60408051602081019091529081529392505050565b82518451146166015760405160e560020a62461bcd028152600401808060200182810382526023815260200180616bb66023913960400191505060405180910390fd5b83518210616659576040805160e560020a62461bcd02815260206004820152601d60248201527f6865617020737461727420696e646578206f7574206f662072616e6765000000604482015290519081900360640190fd5b83518111156166b2576040805160e560020a62461bcd02815260206004820152601860248201527f68656170206c656e677468206f7574206f662072616e67650000000000000000604482015290519081900360640190fd5b815b60006166cc600161454d84600263ffffffff61543a16565b905060006166e5600261454d858263ffffffff61543a16565b905082848310801561675b575061675b87898381518110151561670457fe5b602090810290910101518151811061671857fe5b90602001906020020151888a8681518110151561673157fe5b602090810290910101518151811061674557fe5b602090810290910101519063ffffffff61683516565b156167635750815b84821080156167ac57506167ac87898381518110151561677f57fe5b602090810290910101518151811061679357fe5b90602001906020020151888a8581518110151561673157fe5b156167b45750805b838114156167c457505050615afc565b600088858151811015156167d457fe5b90602001906020020151905088828151811015156167ee57fe5b90602001906020020151898681518110151561680657fe5b60209081029091010152885181908a908490811061682057fe5b602090810290910101525092506166b4915050565b5190511190565b60408051808201909152606081526000602082015290565b60408051602081019091526000815290565b81548183558181111561688a5760008381526020902061688a91810190830161688f565b505050565b6113eb91905b808211156168a95760008155600101616895565b509056fe566f74652076616c75652063616e6e6f74206265207a65726f000000000000004d6178696d756d20656c65637461626c652076616c696461746f72732063616e6e6f7420626520736d616c6c6572207468616e206d696e696d756d6572726f722063616c6c696e67206e756d62657256616c696461746f7273496e53657420707265636f6d70696c657265656e7472616e742063616c6c0000000000000000000000000000000000004f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373496e707574206c656e67746873206d75737420626520636f72726573706f6e642e456c6563746162696c697479207468726573686f6c64206d757374206265206c6f776572207468616e20313030256572726f722063616c6c696e672067657456657269666965645365616c4269746d617046726f6d48656164657220707265636f6d70696c6563616e277420637265617465206669786964697479206e756d626572206c6172676572207468616e206d61784e657746697865642829566f74652076616c7565206c6172676572207468616e2061637469766520766f7465736572726f722063616c6c696e672076616c696461746f725369676e65724164647265737346726f6d43757272656e7453657420707265636f6d70696c656572726f722063616c6c696e67206e756d62657256616c696461746f7273496e43757272656e7453657420707265636f6d70696c656572726f722063616c6c696e672076616c696461746f725369676e65724164647265737346726f6d53657420707265636f6d70696c65536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726572726f722063616c6c696e67206672616374696f6e4d756c45787020707265636f6d70696c656572726f722063616c6c696e672067657445706f636853697a6520707265636f6d70696c65566f74652076616c7565206c6172676572207468616e2070656e64696e6720766f7465736b657920616e642076616c7565206172726179206c656e677468206d69736d617463686572726f722063616c6c696e6720676574506172656e745365616c4269746d617020707265636f6d70696c656572726f722063616c6c696e6720676574426c6f636b4e756d62657246726f6d48656164657220707265636f6d70696c654d696e696d756d20656c65637461626c652076616c696461746f72732063616e6e6f74206265207a65726f44656372656d656e742076616c7565206d7573742062652067726561746572207468616e20302e6572726f722063616c6c696e67206861736848656164657220707265636f6d70696c65a165627a7a723058205a8bf4d26ca17c5492cf15c73ba3d7a5d92db645735fd799862c38b4db4b9dd10029"

// DeployElection deploys a new Ethereum contract, binding an instance of Election to it.
func DeployElection(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Election, error) {
	parsed, err := abi.JSON(strings.NewReader(ElectionABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ElectionBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Election{ElectionCaller: ElectionCaller{contract: contract}, ElectionTransactor: ElectionTransactor{contract: contract}, ElectionFilterer: ElectionFilterer{contract: contract}}, nil
}

// Election is an auto generated Go binding around an Ethereum contract.
type Election struct {
	ElectionCaller     // Read-only binding to the contract
	ElectionTransactor // Write-only binding to the contract
	ElectionFilterer   // Log filterer for contract events
}

// ElectionCaller is an auto generated read-only Go binding around an Ethereum contract.
type ElectionCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ElectionTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ElectionTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ElectionFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ElectionFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ElectionSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ElectionSession struct {
	Contract     *Election         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ElectionCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ElectionCallerSession struct {
	Contract *ElectionCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// ElectionTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ElectionTransactorSession struct {
	Contract     *ElectionTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ElectionRaw is an auto generated low-level Go binding around an Ethereum contract.
type ElectionRaw struct {
	Contract *Election // Generic contract binding to access the raw methods on
}

// ElectionCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ElectionCallerRaw struct {
	Contract *ElectionCaller // Generic read-only contract binding to access the raw methods on
}

// ElectionTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ElectionTransactorRaw struct {
	Contract *ElectionTransactor // Generic write-only contract binding to access the raw methods on
}

// NewElection creates a new instance of Election, bound to a specific deployed contract.
func NewElection(address common.Address, backend bind.ContractBackend) (*Election, error) {
	contract, err := bindElection(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Election{ElectionCaller: ElectionCaller{contract: contract}, ElectionTransactor: ElectionTransactor{contract: contract}, ElectionFilterer: ElectionFilterer{contract: contract}}, nil
}

// NewElectionCaller creates a new read-only instance of Election, bound to a specific deployed contract.
func NewElectionCaller(address common.Address, caller bind.ContractCaller) (*ElectionCaller, error) {
	contract, err := bindElection(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ElectionCaller{contract: contract}, nil
}

// NewElectionTransactor creates a new write-only instance of Election, bound to a specific deployed contract.
func NewElectionTransactor(address common.Address, transactor bind.ContractTransactor) (*ElectionTransactor, error) {
	contract, err := bindElection(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ElectionTransactor{contract: contract}, nil
}

// NewElectionFilterer creates a new log filterer instance of Election, bound to a specific deployed contract.
func NewElectionFilterer(address common.Address, filterer bind.ContractFilterer) (*ElectionFilterer, error) {
	contract, err := bindElection(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ElectionFilterer{contract: contract}, nil
}

// bindElection binds a generic wrapper to an already deployed contract.
func bindElection(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ElectionABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Election *ElectionRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Election.Contract.ElectionCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Election *ElectionRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Election.Contract.ElectionTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Election *ElectionRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Election.Contract.ElectionTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Election *ElectionCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Election.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Election *ElectionTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Election.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Election *ElectionTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Election.Contract.contract.Transact(opts, method, params...)
}

// CanReceiveVotes is a free data retrieval call binding the contract method 0xe59ea3e8.
//
// Solidity: function canReceiveVotes(address group, uint256 value) constant returns(bool)
func (_Election *ElectionCaller) CanReceiveVotes(opts *bind.CallOpts, group common.Address, value *big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Election.contract.Call(opts, out, "canReceiveVotes", group, value)
	return *ret0, err
}

// CanReceiveVotes is a free data retrieval call binding the contract method 0xe59ea3e8.
//
// Solidity: function canReceiveVotes(address group, uint256 value) constant returns(bool)
func (_Election *ElectionSession) CanReceiveVotes(group common.Address, value *big.Int) (bool, error) {
	return _Election.Contract.CanReceiveVotes(&_Election.CallOpts, group, value)
}

// CanReceiveVotes is a free data retrieval call binding the contract method 0xe59ea3e8.
//
// Solidity: function canReceiveVotes(address group, uint256 value) constant returns(bool)
func (_Election *ElectionCallerSession) CanReceiveVotes(group common.Address, value *big.Int) (bool, error) {
	return _Election.Contract.CanReceiveVotes(&_Election.CallOpts, group, value)
}

// CheckProofOfPossession is a free data retrieval call binding the contract method 0x23f0ab65.
//
// Solidity: function checkProofOfPossession(address sender, bytes blsKey, bytes blsPop) constant returns(bool)
func (_Election *ElectionCaller) CheckProofOfPossession(opts *bind.CallOpts, sender common.Address, blsKey []byte, blsPop []byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Election.contract.Call(opts, out, "checkProofOfPossession", sender, blsKey, blsPop)
	return *ret0, err
}

// CheckProofOfPossession is a free data retrieval call binding the contract method 0x23f0ab65.
//
// Solidity: function checkProofOfPossession(address sender, bytes blsKey, bytes blsPop) constant returns(bool)
func (_Election *ElectionSession) CheckProofOfPossession(sender common.Address, blsKey []byte, blsPop []byte) (bool, error) {
	return _Election.Contract.CheckProofOfPossession(&_Election.CallOpts, sender, blsKey, blsPop)
}

// CheckProofOfPossession is a free data retrieval call binding the contract method 0x23f0ab65.
//
// Solidity: function checkProofOfPossession(address sender, bytes blsKey, bytes blsPop) constant returns(bool)
func (_Election *ElectionCallerSession) CheckProofOfPossession(sender common.Address, blsKey []byte, blsPop []byte) (bool, error) {
	return _Election.Contract.CheckProofOfPossession(&_Election.CallOpts, sender, blsKey, blsPop)
}

// ElectNValidatorSigners is a free data retrieval call binding the contract method 0x90a4dd5c.
//
// Solidity: function electNValidatorSigners(uint256 minElectableValidators, uint256 maxElectableValidators) constant returns(address[])
func (_Election *ElectionCaller) ElectNValidatorSigners(opts *bind.CallOpts, minElectableValidators *big.Int, maxElectableValidators *big.Int) ([]common.Address, error) {
	var (
		ret0 = new([]common.Address)
	)
	out := ret0
	err := _Election.contract.Call(opts, out, "electNValidatorSigners", minElectableValidators, maxElectableValidators)
	return *ret0, err
}

// ElectNValidatorSigners is a free data retrieval call binding the contract method 0x90a4dd5c.
//
// Solidity: function electNValidatorSigners(uint256 minElectableValidators, uint256 maxElectableValidators) constant returns(address[])
func (_Election *ElectionSession) ElectNValidatorSigners(minElectableValidators *big.Int, maxElectableValidators *big.Int) ([]common.Address, error) {
	return _Election.Contract.ElectNValidatorSigners(&_Election.CallOpts, minElectableValidators, maxElectableValidators)
}

// ElectNValidatorSigners is a free data retrieval call binding the contract method 0x90a4dd5c.
//
// Solidity: function electNValidatorSigners(uint256 minElectableValidators, uint256 maxElectableValidators) constant returns(address[])
func (_Election *ElectionCallerSession) ElectNValidatorSigners(minElectableValidators *big.Int, maxElectableValidators *big.Int) ([]common.Address, error) {
	return _Election.Contract.ElectNValidatorSigners(&_Election.CallOpts, minElectableValidators, maxElectableValidators)
}

// ElectValidatorSigners is a free data retrieval call binding the contract method 0x2ba38e69.
//
// Solidity: function electValidatorSigners() constant returns(address[])
func (_Election *ElectionCaller) ElectValidatorSigners(opts *bind.CallOpts) ([]common.Address, error) {
	var (
		ret0 = new([]common.Address)
	)
	out := ret0
	err := _Election.contract.Call(opts, out, "electValidatorSigners")
	return *ret0, err
}

// ElectValidatorSigners is a free data retrieval call binding the contract method 0x2ba38e69.
//
// Solidity: function electValidatorSigners() constant returns(address[])
func (_Election *ElectionSession) ElectValidatorSigners() ([]common.Address, error) {
	return _Election.Contract.ElectValidatorSigners(&_Election.CallOpts)
}

// ElectValidatorSigners is a free data retrieval call binding the contract method 0x2ba38e69.
//
// Solidity: function electValidatorSigners() constant returns(address[])
func (_Election *ElectionCallerSession) ElectValidatorSigners() ([]common.Address, error) {
	return _Election.Contract.ElectValidatorSigners(&_Election.CallOpts)
}

// ElectabilityThreshold is a free data retrieval call binding the contract method 0x4be8843b.
//
// Solidity: function electabilityThreshold() constant returns(uint256 value)
func (_Election *ElectionCaller) ElectabilityThreshold(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Election.contract.Call(opts, out, "electabilityThreshold")
	return *ret0, err
}

// ElectabilityThreshold is a free data retrieval call binding the contract method 0x4be8843b.
//
// Solidity: function electabilityThreshold() constant returns(uint256 value)
func (_Election *ElectionSession) ElectabilityThreshold() (*big.Int, error) {
	return _Election.Contract.ElectabilityThreshold(&_Election.CallOpts)
}

// ElectabilityThreshold is a free data retrieval call binding the contract method 0x4be8843b.
//
// Solidity: function electabilityThreshold() constant returns(uint256 value)
func (_Election *ElectionCallerSession) ElectabilityThreshold() (*big.Int, error) {
	return _Election.Contract.ElectabilityThreshold(&_Election.CallOpts)
}

// ElectableValidators is a free data retrieval call binding the contract method 0xf9d7daae.
//
// Solidity: function electableValidators() constant returns(uint256 min, uint256 max)
func (_Election *ElectionCaller) ElectableValidators(opts *bind.CallOpts) (struct {
	Min *big.Int
	Max *big.Int
}, error) {
	ret := new(struct {
		Min *big.Int
		Max *big.Int
	})
	out := ret
	err := _Election.contract.Call(opts, out, "electableValidators")
	return *ret, err
}

// ElectableValidators is a free data retrieval call binding the contract method 0xf9d7daae.
//
// Solidity: function electableValidators() constant returns(uint256 min, uint256 max)
func (_Election *ElectionSession) ElectableValidators() (struct {
	Min *big.Int
	Max *big.Int
}, error) {
	return _Election.Contract.ElectableValidators(&_Election.CallOpts)
}

// ElectableValidators is a free data retrieval call binding the contract method 0xf9d7daae.
//
// Solidity: function electableValidators() constant returns(uint256 min, uint256 max)
func (_Election *ElectionCallerSession) ElectableValidators() (struct {
	Min *big.Int
	Max *big.Int
}, error) {
	return _Election.Contract.ElectableValidators(&_Election.CallOpts)
}

// FractionMulExp is a free data retrieval call binding the contract method 0xec683072.
//
// Solidity: function fractionMulExp(uint256 aNumerator, uint256 aDenominator, uint256 bNumerator, uint256 bDenominator, uint256 exponent, uint256 _decimals) constant returns(uint256, uint256)
func (_Election *ElectionCaller) FractionMulExp(opts *bind.CallOpts, aNumerator *big.Int, aDenominator *big.Int, bNumerator *big.Int, bDenominator *big.Int, exponent *big.Int, _decimals *big.Int) (*big.Int, *big.Int, error) {
	var (
		ret0 = new(*big.Int)
		ret1 = new(*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
	}
	err := _Election.contract.Call(opts, out, "fractionMulExp", aNumerator, aDenominator, bNumerator, bDenominator, exponent, _decimals)
	return *ret0, *ret1, err
}

// FractionMulExp is a free data retrieval call binding the contract method 0xec683072.
//
// Solidity: function fractionMulExp(uint256 aNumerator, uint256 aDenominator, uint256 bNumerator, uint256 bDenominator, uint256 exponent, uint256 _decimals) constant returns(uint256, uint256)
func (_Election *ElectionSession) FractionMulExp(aNumerator *big.Int, aDenominator *big.Int, bNumerator *big.Int, bDenominator *big.Int, exponent *big.Int, _decimals *big.Int) (*big.Int, *big.Int, error) {
	return _Election.Contract.FractionMulExp(&_Election.CallOpts, aNumerator, aDenominator, bNumerator, bDenominator, exponent, _decimals)
}

// FractionMulExp is a free data retrieval call binding the contract method 0xec683072.
//
// Solidity: function fractionMulExp(uint256 aNumerator, uint256 aDenominator, uint256 bNumerator, uint256 bDenominator, uint256 exponent, uint256 _decimals) constant returns(uint256, uint256)
func (_Election *ElectionCallerSession) FractionMulExp(aNumerator *big.Int, aDenominator *big.Int, bNumerator *big.Int, bDenominator *big.Int, exponent *big.Int, _decimals *big.Int) (*big.Int, *big.Int, error) {
	return _Election.Contract.FractionMulExp(&_Election.CallOpts, aNumerator, aDenominator, bNumerator, bDenominator, exponent, _decimals)
}

// GetActiveVoteUnitsForGroup is a free data retrieval call binding the contract method 0x5bb5acfb.
//
// Solidity: function getActiveVoteUnitsForGroup(address group) constant returns(uint256)
func (_Election *ElectionCaller) GetActiveVoteUnitsForGroup(opts *bind.CallOpts, group common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Election.contract.Call(opts, out, "getActiveVoteUnitsForGroup", group)
	return *ret0, err
}

// GetActiveVoteUnitsForGroup is a free data retrieval call binding the contract method 0x5bb5acfb.
//
// Solidity: function getActiveVoteUnitsForGroup(address group) constant returns(uint256)
func (_Election *ElectionSession) GetActiveVoteUnitsForGroup(group common.Address) (*big.Int, error) {
	return _Election.Contract.GetActiveVoteUnitsForGroup(&_Election.CallOpts, group)
}

// GetActiveVoteUnitsForGroup is a free data retrieval call binding the contract method 0x5bb5acfb.
//
// Solidity: function getActiveVoteUnitsForGroup(address group) constant returns(uint256)
func (_Election *ElectionCallerSession) GetActiveVoteUnitsForGroup(group common.Address) (*big.Int, error) {
	return _Election.Contract.GetActiveVoteUnitsForGroup(&_Election.CallOpts, group)
}

// GetActiveVoteUnitsForGroupByAccount is a free data retrieval call binding the contract method 0xa2fb4ddf.
//
// Solidity: function getActiveVoteUnitsForGroupByAccount(address group, address account) constant returns(uint256)
func (_Election *ElectionCaller) GetActiveVoteUnitsForGroupByAccount(opts *bind.CallOpts, group common.Address, account common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Election.contract.Call(opts, out, "getActiveVoteUnitsForGroupByAccount", group, account)
	return *ret0, err
}

// GetActiveVoteUnitsForGroupByAccount is a free data retrieval call binding the contract method 0xa2fb4ddf.
//
// Solidity: function getActiveVoteUnitsForGroupByAccount(address group, address account) constant returns(uint256)
func (_Election *ElectionSession) GetActiveVoteUnitsForGroupByAccount(group common.Address, account common.Address) (*big.Int, error) {
	return _Election.Contract.GetActiveVoteUnitsForGroupByAccount(&_Election.CallOpts, group, account)
}

// GetActiveVoteUnitsForGroupByAccount is a free data retrieval call binding the contract method 0xa2fb4ddf.
//
// Solidity: function getActiveVoteUnitsForGroupByAccount(address group, address account) constant returns(uint256)
func (_Election *ElectionCallerSession) GetActiveVoteUnitsForGroupByAccount(group common.Address, account common.Address) (*big.Int, error) {
	return _Election.Contract.GetActiveVoteUnitsForGroupByAccount(&_Election.CallOpts, group, account)
}

// GetActiveVotes is a free data retrieval call binding the contract method 0x1f604243.
//
// Solidity: function getActiveVotes() constant returns(uint256)
func (_Election *ElectionCaller) GetActiveVotes(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Election.contract.Call(opts, out, "getActiveVotes")
	return *ret0, err
}

// GetActiveVotes is a free data retrieval call binding the contract method 0x1f604243.
//
// Solidity: function getActiveVotes() constant returns(uint256)
func (_Election *ElectionSession) GetActiveVotes() (*big.Int, error) {
	return _Election.Contract.GetActiveVotes(&_Election.CallOpts)
}

// GetActiveVotes is a free data retrieval call binding the contract method 0x1f604243.
//
// Solidity: function getActiveVotes() constant returns(uint256)
func (_Election *ElectionCallerSession) GetActiveVotes() (*big.Int, error) {
	return _Election.Contract.GetActiveVotes(&_Election.CallOpts)
}

// GetActiveVotesForGroup is a free data retrieval call binding the contract method 0x926d00ca.
//
// Solidity: function getActiveVotesForGroup(address group) constant returns(uint256)
func (_Election *ElectionCaller) GetActiveVotesForGroup(opts *bind.CallOpts, group common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Election.contract.Call(opts, out, "getActiveVotesForGroup", group)
	return *ret0, err
}

// GetActiveVotesForGroup is a free data retrieval call binding the contract method 0x926d00ca.
//
// Solidity: function getActiveVotesForGroup(address group) constant returns(uint256)
func (_Election *ElectionSession) GetActiveVotesForGroup(group common.Address) (*big.Int, error) {
	return _Election.Contract.GetActiveVotesForGroup(&_Election.CallOpts, group)
}

// GetActiveVotesForGroup is a free data retrieval call binding the contract method 0x926d00ca.
//
// Solidity: function getActiveVotesForGroup(address group) constant returns(uint256)
func (_Election *ElectionCallerSession) GetActiveVotesForGroup(group common.Address) (*big.Int, error) {
	return _Election.Contract.GetActiveVotesForGroup(&_Election.CallOpts, group)
}

// GetActiveVotesForGroupByAccount is a free data retrieval call binding the contract method 0xd3e242a4.
//
// Solidity: function getActiveVotesForGroupByAccount(address group, address account) constant returns(uint256)
func (_Election *ElectionCaller) GetActiveVotesForGroupByAccount(opts *bind.CallOpts, group common.Address, account common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Election.contract.Call(opts, out, "getActiveVotesForGroupByAccount", group, account)
	return *ret0, err
}

// GetActiveVotesForGroupByAccount is a free data retrieval call binding the contract method 0xd3e242a4.
//
// Solidity: function getActiveVotesForGroupByAccount(address group, address account) constant returns(uint256)
func (_Election *ElectionSession) GetActiveVotesForGroupByAccount(group common.Address, account common.Address) (*big.Int, error) {
	return _Election.Contract.GetActiveVotesForGroupByAccount(&_Election.CallOpts, group, account)
}

// GetActiveVotesForGroupByAccount is a free data retrieval call binding the contract method 0xd3e242a4.
//
// Solidity: function getActiveVotesForGroupByAccount(address group, address account) constant returns(uint256)
func (_Election *ElectionCallerSession) GetActiveVotesForGroupByAccount(group common.Address, account common.Address) (*big.Int, error) {
	return _Election.Contract.GetActiveVotesForGroupByAccount(&_Election.CallOpts, group, account)
}

// GetBlockNumberFromHeader is a free data retrieval call binding the contract method 0x8a883626.
//
// Solidity: function getBlockNumberFromHeader(bytes header) constant returns(uint256)
func (_Election *ElectionCaller) GetBlockNumberFromHeader(opts *bind.CallOpts, header []byte) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Election.contract.Call(opts, out, "getBlockNumberFromHeader", header)
	return *ret0, err
}

// GetBlockNumberFromHeader is a free data retrieval call binding the contract method 0x8a883626.
//
// Solidity: function getBlockNumberFromHeader(bytes header) constant returns(uint256)
func (_Election *ElectionSession) GetBlockNumberFromHeader(header []byte) (*big.Int, error) {
	return _Election.Contract.GetBlockNumberFromHeader(&_Election.CallOpts, header)
}

// GetBlockNumberFromHeader is a free data retrieval call binding the contract method 0x8a883626.
//
// Solidity: function getBlockNumberFromHeader(bytes header) constant returns(uint256)
func (_Election *ElectionCallerSession) GetBlockNumberFromHeader(header []byte) (*big.Int, error) {
	return _Election.Contract.GetBlockNumberFromHeader(&_Election.CallOpts, header)
}

// GetCurrentValidatorSigners is a free data retrieval call binding the contract method 0x448144c8.
//
// Solidity: function getCurrentValidatorSigners() constant returns(address[])
func (_Election *ElectionCaller) GetCurrentValidatorSigners(opts *bind.CallOpts) ([]common.Address, error) {
	var (
		ret0 = new([]common.Address)
	)
	out := ret0
	err := _Election.contract.Call(opts, out, "getCurrentValidatorSigners")
	return *ret0, err
}

// GetCurrentValidatorSigners is a free data retrieval call binding the contract method 0x448144c8.
//
// Solidity: function getCurrentValidatorSigners() constant returns(address[])
func (_Election *ElectionSession) GetCurrentValidatorSigners() ([]common.Address, error) {
	return _Election.Contract.GetCurrentValidatorSigners(&_Election.CallOpts)
}

// GetCurrentValidatorSigners is a free data retrieval call binding the contract method 0x448144c8.
//
// Solidity: function getCurrentValidatorSigners() constant returns(address[])
func (_Election *ElectionCallerSession) GetCurrentValidatorSigners() ([]common.Address, error) {
	return _Election.Contract.GetCurrentValidatorSigners(&_Election.CallOpts)
}

// GetElectabilityThreshold is a free data retrieval call binding the contract method 0xbdd14318.
//
// Solidity: function getElectabilityThreshold() constant returns(uint256)
func (_Election *ElectionCaller) GetElectabilityThreshold(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Election.contract.Call(opts, out, "getElectabilityThreshold")
	return *ret0, err
}

// GetElectabilityThreshold is a free data retrieval call binding the contract method 0xbdd14318.
//
// Solidity: function getElectabilityThreshold() constant returns(uint256)
func (_Election *ElectionSession) GetElectabilityThreshold() (*big.Int, error) {
	return _Election.Contract.GetElectabilityThreshold(&_Election.CallOpts)
}

// GetElectabilityThreshold is a free data retrieval call binding the contract method 0xbdd14318.
//
// Solidity: function getElectabilityThreshold() constant returns(uint256)
func (_Election *ElectionCallerSession) GetElectabilityThreshold() (*big.Int, error) {
	return _Election.Contract.GetElectabilityThreshold(&_Election.CallOpts)
}

// GetElectableValidators is a free data retrieval call binding the contract method 0xf9f41a7a.
//
// Solidity: function getElectableValidators() constant returns(uint256, uint256)
func (_Election *ElectionCaller) GetElectableValidators(opts *bind.CallOpts) (*big.Int, *big.Int, error) {
	var (
		ret0 = new(*big.Int)
		ret1 = new(*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
	}
	err := _Election.contract.Call(opts, out, "getElectableValidators")
	return *ret0, *ret1, err
}

// GetElectableValidators is a free data retrieval call binding the contract method 0xf9f41a7a.
//
// Solidity: function getElectableValidators() constant returns(uint256, uint256)
func (_Election *ElectionSession) GetElectableValidators() (*big.Int, *big.Int, error) {
	return _Election.Contract.GetElectableValidators(&_Election.CallOpts)
}

// GetElectableValidators is a free data retrieval call binding the contract method 0xf9f41a7a.
//
// Solidity: function getElectableValidators() constant returns(uint256, uint256)
func (_Election *ElectionCallerSession) GetElectableValidators() (*big.Int, *big.Int, error) {
	return _Election.Contract.GetElectableValidators(&_Election.CallOpts)
}

// GetEligibleValidatorGroups is a free data retrieval call binding the contract method 0xa5826ab2.
//
// Solidity: function getEligibleValidatorGroups() constant returns(address[])
func (_Election *ElectionCaller) GetEligibleValidatorGroups(opts *bind.CallOpts) ([]common.Address, error) {
	var (
		ret0 = new([]common.Address)
	)
	out := ret0
	err := _Election.contract.Call(opts, out, "getEligibleValidatorGroups")
	return *ret0, err
}

// GetEligibleValidatorGroups is a free data retrieval call binding the contract method 0xa5826ab2.
//
// Solidity: function getEligibleValidatorGroups() constant returns(address[])
func (_Election *ElectionSession) GetEligibleValidatorGroups() ([]common.Address, error) {
	return _Election.Contract.GetEligibleValidatorGroups(&_Election.CallOpts)
}

// GetEligibleValidatorGroups is a free data retrieval call binding the contract method 0xa5826ab2.
//
// Solidity: function getEligibleValidatorGroups() constant returns(address[])
func (_Election *ElectionCallerSession) GetEligibleValidatorGroups() ([]common.Address, error) {
	return _Election.Contract.GetEligibleValidatorGroups(&_Election.CallOpts)
}

// GetEpochNumber is a free data retrieval call binding the contract method 0x9a7b3be7.
//
// Solidity: function getEpochNumber() constant returns(uint256)
func (_Election *ElectionCaller) GetEpochNumber(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Election.contract.Call(opts, out, "getEpochNumber")
	return *ret0, err
}

// GetEpochNumber is a free data retrieval call binding the contract method 0x9a7b3be7.
//
// Solidity: function getEpochNumber() constant returns(uint256)
func (_Election *ElectionSession) GetEpochNumber() (*big.Int, error) {
	return _Election.Contract.GetEpochNumber(&_Election.CallOpts)
}

// GetEpochNumber is a free data retrieval call binding the contract method 0x9a7b3be7.
//
// Solidity: function getEpochNumber() constant returns(uint256)
func (_Election *ElectionCallerSession) GetEpochNumber() (*big.Int, error) {
	return _Election.Contract.GetEpochNumber(&_Election.CallOpts)
}

// GetEpochNumberOfBlock is a free data retrieval call binding the contract method 0x3b1eb4bf.
//
// Solidity: function getEpochNumberOfBlock(uint256 blockNumber) constant returns(uint256)
func (_Election *ElectionCaller) GetEpochNumberOfBlock(opts *bind.CallOpts, blockNumber *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Election.contract.Call(opts, out, "getEpochNumberOfBlock", blockNumber)
	return *ret0, err
}

// GetEpochNumberOfBlock is a free data retrieval call binding the contract method 0x3b1eb4bf.
//
// Solidity: function getEpochNumberOfBlock(uint256 blockNumber) constant returns(uint256)
func (_Election *ElectionSession) GetEpochNumberOfBlock(blockNumber *big.Int) (*big.Int, error) {
	return _Election.Contract.GetEpochNumberOfBlock(&_Election.CallOpts, blockNumber)
}

// GetEpochNumberOfBlock is a free data retrieval call binding the contract method 0x3b1eb4bf.
//
// Solidity: function getEpochNumberOfBlock(uint256 blockNumber) constant returns(uint256)
func (_Election *ElectionCallerSession) GetEpochNumberOfBlock(blockNumber *big.Int) (*big.Int, error) {
	return _Election.Contract.GetEpochNumberOfBlock(&_Election.CallOpts, blockNumber)
}

// GetEpochSize is a free data retrieval call binding the contract method 0xdf4da461.
//
// Solidity: function getEpochSize() constant returns(uint256)
func (_Election *ElectionCaller) GetEpochSize(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Election.contract.Call(opts, out, "getEpochSize")
	return *ret0, err
}

// GetEpochSize is a free data retrieval call binding the contract method 0xdf4da461.
//
// Solidity: function getEpochSize() constant returns(uint256)
func (_Election *ElectionSession) GetEpochSize() (*big.Int, error) {
	return _Election.Contract.GetEpochSize(&_Election.CallOpts)
}

// GetEpochSize is a free data retrieval call binding the contract method 0xdf4da461.
//
// Solidity: function getEpochSize() constant returns(uint256)
func (_Election *ElectionCallerSession) GetEpochSize() (*big.Int, error) {
	return _Election.Contract.GetEpochSize(&_Election.CallOpts)
}

// GetGroupEligibility is a free data retrieval call binding the contract method 0x8c666775.
//
// Solidity: function getGroupEligibility(address group) constant returns(bool)
func (_Election *ElectionCaller) GetGroupEligibility(opts *bind.CallOpts, group common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Election.contract.Call(opts, out, "getGroupEligibility", group)
	return *ret0, err
}

// GetGroupEligibility is a free data retrieval call binding the contract method 0x8c666775.
//
// Solidity: function getGroupEligibility(address group) constant returns(bool)
func (_Election *ElectionSession) GetGroupEligibility(group common.Address) (bool, error) {
	return _Election.Contract.GetGroupEligibility(&_Election.CallOpts, group)
}

// GetGroupEligibility is a free data retrieval call binding the contract method 0x8c666775.
//
// Solidity: function getGroupEligibility(address group) constant returns(bool)
func (_Election *ElectionCallerSession) GetGroupEligibility(group common.Address) (bool, error) {
	return _Election.Contract.GetGroupEligibility(&_Election.CallOpts, group)
}

// GetGroupEpochRewards is a free data retrieval call binding the contract method 0xf23263f9.
//
// Solidity: function getGroupEpochRewards(address group, uint256 totalEpochRewards, uint256[] uptimes) constant returns(uint256)
func (_Election *ElectionCaller) GetGroupEpochRewards(opts *bind.CallOpts, group common.Address, totalEpochRewards *big.Int, uptimes []*big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Election.contract.Call(opts, out, "getGroupEpochRewards", group, totalEpochRewards, uptimes)
	return *ret0, err
}

// GetGroupEpochRewards is a free data retrieval call binding the contract method 0xf23263f9.
//
// Solidity: function getGroupEpochRewards(address group, uint256 totalEpochRewards, uint256[] uptimes) constant returns(uint256)
func (_Election *ElectionSession) GetGroupEpochRewards(group common.Address, totalEpochRewards *big.Int, uptimes []*big.Int) (*big.Int, error) {
	return _Election.Contract.GetGroupEpochRewards(&_Election.CallOpts, group, totalEpochRewards, uptimes)
}

// GetGroupEpochRewards is a free data retrieval call binding the contract method 0xf23263f9.
//
// Solidity: function getGroupEpochRewards(address group, uint256 totalEpochRewards, uint256[] uptimes) constant returns(uint256)
func (_Election *ElectionCallerSession) GetGroupEpochRewards(group common.Address, totalEpochRewards *big.Int, uptimes []*big.Int) (*big.Int, error) {
	return _Election.Contract.GetGroupEpochRewards(&_Election.CallOpts, group, totalEpochRewards, uptimes)
}

// GetGroupsVotedForByAccount is a free data retrieval call binding the contract method 0x457578a3.
//
// Solidity: function getGroupsVotedForByAccount(address account) constant returns(address[])
func (_Election *ElectionCaller) GetGroupsVotedForByAccount(opts *bind.CallOpts, account common.Address) ([]common.Address, error) {
	var (
		ret0 = new([]common.Address)
	)
	out := ret0
	err := _Election.contract.Call(opts, out, "getGroupsVotedForByAccount", account)
	return *ret0, err
}

// GetGroupsVotedForByAccount is a free data retrieval call binding the contract method 0x457578a3.
//
// Solidity: function getGroupsVotedForByAccount(address account) constant returns(address[])
func (_Election *ElectionSession) GetGroupsVotedForByAccount(account common.Address) ([]common.Address, error) {
	return _Election.Contract.GetGroupsVotedForByAccount(&_Election.CallOpts, account)
}

// GetGroupsVotedForByAccount is a free data retrieval call binding the contract method 0x457578a3.
//
// Solidity: function getGroupsVotedForByAccount(address account) constant returns(address[])
func (_Election *ElectionCallerSession) GetGroupsVotedForByAccount(account common.Address) ([]common.Address, error) {
	return _Election.Contract.GetGroupsVotedForByAccount(&_Election.CallOpts, account)
}

// GetNumVotesReceivable is a free data retrieval call binding the contract method 0x2c3b7916.
//
// Solidity: function getNumVotesReceivable(address group) constant returns(uint256)
func (_Election *ElectionCaller) GetNumVotesReceivable(opts *bind.CallOpts, group common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Election.contract.Call(opts, out, "getNumVotesReceivable", group)
	return *ret0, err
}

// GetNumVotesReceivable is a free data retrieval call binding the contract method 0x2c3b7916.
//
// Solidity: function getNumVotesReceivable(address group) constant returns(uint256)
func (_Election *ElectionSession) GetNumVotesReceivable(group common.Address) (*big.Int, error) {
	return _Election.Contract.GetNumVotesReceivable(&_Election.CallOpts, group)
}

// GetNumVotesReceivable is a free data retrieval call binding the contract method 0x2c3b7916.
//
// Solidity: function getNumVotesReceivable(address group) constant returns(uint256)
func (_Election *ElectionCallerSession) GetNumVotesReceivable(group common.Address) (*big.Int, error) {
	return _Election.Contract.GetNumVotesReceivable(&_Election.CallOpts, group)
}

// GetParentSealBitmap is a free data retrieval call binding the contract method 0xfae8db0a.
//
// Solidity: function getParentSealBitmap(uint256 blockNumber) constant returns(bytes32)
func (_Election *ElectionCaller) GetParentSealBitmap(opts *bind.CallOpts, blockNumber *big.Int) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Election.contract.Call(opts, out, "getParentSealBitmap", blockNumber)
	return *ret0, err
}

// GetParentSealBitmap is a free data retrieval call binding the contract method 0xfae8db0a.
//
// Solidity: function getParentSealBitmap(uint256 blockNumber) constant returns(bytes32)
func (_Election *ElectionSession) GetParentSealBitmap(blockNumber *big.Int) ([32]byte, error) {
	return _Election.Contract.GetParentSealBitmap(&_Election.CallOpts, blockNumber)
}

// GetParentSealBitmap is a free data retrieval call binding the contract method 0xfae8db0a.
//
// Solidity: function getParentSealBitmap(uint256 blockNumber) constant returns(bytes32)
func (_Election *ElectionCallerSession) GetParentSealBitmap(blockNumber *big.Int) ([32]byte, error) {
	return _Election.Contract.GetParentSealBitmap(&_Election.CallOpts, blockNumber)
}

// GetPendingVotesForGroup is a free data retrieval call binding the contract method 0x95128ce3.
//
// Solidity: function getPendingVotesForGroup(address group) constant returns(uint256)
func (_Election *ElectionCaller) GetPendingVotesForGroup(opts *bind.CallOpts, group common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Election.contract.Call(opts, out, "getPendingVotesForGroup", group)
	return *ret0, err
}

// GetPendingVotesForGroup is a free data retrieval call binding the contract method 0x95128ce3.
//
// Solidity: function getPendingVotesForGroup(address group) constant returns(uint256)
func (_Election *ElectionSession) GetPendingVotesForGroup(group common.Address) (*big.Int, error) {
	return _Election.Contract.GetPendingVotesForGroup(&_Election.CallOpts, group)
}

// GetPendingVotesForGroup is a free data retrieval call binding the contract method 0x95128ce3.
//
// Solidity: function getPendingVotesForGroup(address group) constant returns(uint256)
func (_Election *ElectionCallerSession) GetPendingVotesForGroup(group common.Address) (*big.Int, error) {
	return _Election.Contract.GetPendingVotesForGroup(&_Election.CallOpts, group)
}

// GetPendingVotesForGroupByAccount is a free data retrieval call binding the contract method 0x9b95975f.
//
// Solidity: function getPendingVotesForGroupByAccount(address group, address account) constant returns(uint256)
func (_Election *ElectionCaller) GetPendingVotesForGroupByAccount(opts *bind.CallOpts, group common.Address, account common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Election.contract.Call(opts, out, "getPendingVotesForGroupByAccount", group, account)
	return *ret0, err
}

// GetPendingVotesForGroupByAccount is a free data retrieval call binding the contract method 0x9b95975f.
//
// Solidity: function getPendingVotesForGroupByAccount(address group, address account) constant returns(uint256)
func (_Election *ElectionSession) GetPendingVotesForGroupByAccount(group common.Address, account common.Address) (*big.Int, error) {
	return _Election.Contract.GetPendingVotesForGroupByAccount(&_Election.CallOpts, group, account)
}

// GetPendingVotesForGroupByAccount is a free data retrieval call binding the contract method 0x9b95975f.
//
// Solidity: function getPendingVotesForGroupByAccount(address group, address account) constant returns(uint256)
func (_Election *ElectionCallerSession) GetPendingVotesForGroupByAccount(group common.Address, account common.Address) (*big.Int, error) {
	return _Election.Contract.GetPendingVotesForGroupByAccount(&_Election.CallOpts, group, account)
}

// GetTotalVotes is a free data retrieval call binding the contract method 0x9a0e7d66.
//
// Solidity: function getTotalVotes() constant returns(uint256)
func (_Election *ElectionCaller) GetTotalVotes(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Election.contract.Call(opts, out, "getTotalVotes")
	return *ret0, err
}

// GetTotalVotes is a free data retrieval call binding the contract method 0x9a0e7d66.
//
// Solidity: function getTotalVotes() constant returns(uint256)
func (_Election *ElectionSession) GetTotalVotes() (*big.Int, error) {
	return _Election.Contract.GetTotalVotes(&_Election.CallOpts)
}

// GetTotalVotes is a free data retrieval call binding the contract method 0x9a0e7d66.
//
// Solidity: function getTotalVotes() constant returns(uint256)
func (_Election *ElectionCallerSession) GetTotalVotes() (*big.Int, error) {
	return _Election.Contract.GetTotalVotes(&_Election.CallOpts)
}

// GetTotalVotesByAccount is a free data retrieval call binding the contract method 0x6c781a2c.
//
// Solidity: function getTotalVotesByAccount(address account) constant returns(uint256)
func (_Election *ElectionCaller) GetTotalVotesByAccount(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Election.contract.Call(opts, out, "getTotalVotesByAccount", account)
	return *ret0, err
}

// GetTotalVotesByAccount is a free data retrieval call binding the contract method 0x6c781a2c.
//
// Solidity: function getTotalVotesByAccount(address account) constant returns(uint256)
func (_Election *ElectionSession) GetTotalVotesByAccount(account common.Address) (*big.Int, error) {
	return _Election.Contract.GetTotalVotesByAccount(&_Election.CallOpts, account)
}

// GetTotalVotesByAccount is a free data retrieval call binding the contract method 0x6c781a2c.
//
// Solidity: function getTotalVotesByAccount(address account) constant returns(uint256)
func (_Election *ElectionCallerSession) GetTotalVotesByAccount(account common.Address) (*big.Int, error) {
	return _Election.Contract.GetTotalVotesByAccount(&_Election.CallOpts, account)
}

// GetTotalVotesForEligibleValidatorGroups is a free data retrieval call binding the contract method 0x7046c96b.
//
// Solidity: function getTotalVotesForEligibleValidatorGroups() constant returns(address[] groups, uint256[] values)
func (_Election *ElectionCaller) GetTotalVotesForEligibleValidatorGroups(opts *bind.CallOpts) (struct {
	Groups []common.Address
	Values []*big.Int
}, error) {
	ret := new(struct {
		Groups []common.Address
		Values []*big.Int
	})
	out := ret
	err := _Election.contract.Call(opts, out, "getTotalVotesForEligibleValidatorGroups")
	return *ret, err
}

// GetTotalVotesForEligibleValidatorGroups is a free data retrieval call binding the contract method 0x7046c96b.
//
// Solidity: function getTotalVotesForEligibleValidatorGroups() constant returns(address[] groups, uint256[] values)
func (_Election *ElectionSession) GetTotalVotesForEligibleValidatorGroups() (struct {
	Groups []common.Address
	Values []*big.Int
}, error) {
	return _Election.Contract.GetTotalVotesForEligibleValidatorGroups(&_Election.CallOpts)
}

// GetTotalVotesForEligibleValidatorGroups is a free data retrieval call binding the contract method 0x7046c96b.
//
// Solidity: function getTotalVotesForEligibleValidatorGroups() constant returns(address[] groups, uint256[] values)
func (_Election *ElectionCallerSession) GetTotalVotesForEligibleValidatorGroups() (struct {
	Groups []common.Address
	Values []*big.Int
}, error) {
	return _Election.Contract.GetTotalVotesForEligibleValidatorGroups(&_Election.CallOpts)
}

// GetTotalVotesForGroup is a free data retrieval call binding the contract method 0xdedafeae.
//
// Solidity: function getTotalVotesForGroup(address group) constant returns(uint256)
func (_Election *ElectionCaller) GetTotalVotesForGroup(opts *bind.CallOpts, group common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Election.contract.Call(opts, out, "getTotalVotesForGroup", group)
	return *ret0, err
}

// GetTotalVotesForGroup is a free data retrieval call binding the contract method 0xdedafeae.
//
// Solidity: function getTotalVotesForGroup(address group) constant returns(uint256)
func (_Election *ElectionSession) GetTotalVotesForGroup(group common.Address) (*big.Int, error) {
	return _Election.Contract.GetTotalVotesForGroup(&_Election.CallOpts, group)
}

// GetTotalVotesForGroup is a free data retrieval call binding the contract method 0xdedafeae.
//
// Solidity: function getTotalVotesForGroup(address group) constant returns(uint256)
func (_Election *ElectionCallerSession) GetTotalVotesForGroup(group common.Address) (*big.Int, error) {
	return _Election.Contract.GetTotalVotesForGroup(&_Election.CallOpts, group)
}

// GetTotalVotesForGroupByAccount is a free data retrieval call binding the contract method 0x38617272.
//
// Solidity: function getTotalVotesForGroupByAccount(address group, address account) constant returns(uint256)
func (_Election *ElectionCaller) GetTotalVotesForGroupByAccount(opts *bind.CallOpts, group common.Address, account common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Election.contract.Call(opts, out, "getTotalVotesForGroupByAccount", group, account)
	return *ret0, err
}

// GetTotalVotesForGroupByAccount is a free data retrieval call binding the contract method 0x38617272.
//
// Solidity: function getTotalVotesForGroupByAccount(address group, address account) constant returns(uint256)
func (_Election *ElectionSession) GetTotalVotesForGroupByAccount(group common.Address, account common.Address) (*big.Int, error) {
	return _Election.Contract.GetTotalVotesForGroupByAccount(&_Election.CallOpts, group, account)
}

// GetTotalVotesForGroupByAccount is a free data retrieval call binding the contract method 0x38617272.
//
// Solidity: function getTotalVotesForGroupByAccount(address group, address account) constant returns(uint256)
func (_Election *ElectionCallerSession) GetTotalVotesForGroupByAccount(group common.Address, account common.Address) (*big.Int, error) {
	return _Election.Contract.GetTotalVotesForGroupByAccount(&_Election.CallOpts, group, account)
}

// GetVerifiedSealBitmapFromHeader is a free data retrieval call binding the contract method 0x4b2c2f44.
//
// Solidity: function getVerifiedSealBitmapFromHeader(bytes header) constant returns(bytes32)
func (_Election *ElectionCaller) GetVerifiedSealBitmapFromHeader(opts *bind.CallOpts, header []byte) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Election.contract.Call(opts, out, "getVerifiedSealBitmapFromHeader", header)
	return *ret0, err
}

// GetVerifiedSealBitmapFromHeader is a free data retrieval call binding the contract method 0x4b2c2f44.
//
// Solidity: function getVerifiedSealBitmapFromHeader(bytes header) constant returns(bytes32)
func (_Election *ElectionSession) GetVerifiedSealBitmapFromHeader(header []byte) ([32]byte, error) {
	return _Election.Contract.GetVerifiedSealBitmapFromHeader(&_Election.CallOpts, header)
}

// GetVerifiedSealBitmapFromHeader is a free data retrieval call binding the contract method 0x4b2c2f44.
//
// Solidity: function getVerifiedSealBitmapFromHeader(bytes header) constant returns(bytes32)
func (_Election *ElectionCallerSession) GetVerifiedSealBitmapFromHeader(header []byte) ([32]byte, error) {
	return _Election.Contract.GetVerifiedSealBitmapFromHeader(&_Election.CallOpts, header)
}

// HasActivatablePendingVotes is a free data retrieval call binding the contract method 0x263ecf74.
//
// Solidity: function hasActivatablePendingVotes(address account, address group) constant returns(bool)
func (_Election *ElectionCaller) HasActivatablePendingVotes(opts *bind.CallOpts, account common.Address, group common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Election.contract.Call(opts, out, "hasActivatablePendingVotes", account, group)
	return *ret0, err
}

// HasActivatablePendingVotes is a free data retrieval call binding the contract method 0x263ecf74.
//
// Solidity: function hasActivatablePendingVotes(address account, address group) constant returns(bool)
func (_Election *ElectionSession) HasActivatablePendingVotes(account common.Address, group common.Address) (bool, error) {
	return _Election.Contract.HasActivatablePendingVotes(&_Election.CallOpts, account, group)
}

// HasActivatablePendingVotes is a free data retrieval call binding the contract method 0x263ecf74.
//
// Solidity: function hasActivatablePendingVotes(address account, address group) constant returns(bool)
func (_Election *ElectionCallerSession) HasActivatablePendingVotes(account common.Address, group common.Address) (bool, error) {
	return _Election.Contract.HasActivatablePendingVotes(&_Election.CallOpts, account, group)
}

// HashHeader is a free data retrieval call binding the contract method 0x67960e91.
//
// Solidity: function hashHeader(bytes header) constant returns(bytes32)
func (_Election *ElectionCaller) HashHeader(opts *bind.CallOpts, header []byte) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Election.contract.Call(opts, out, "hashHeader", header)
	return *ret0, err
}

// HashHeader is a free data retrieval call binding the contract method 0x67960e91.
//
// Solidity: function hashHeader(bytes header) constant returns(bytes32)
func (_Election *ElectionSession) HashHeader(header []byte) ([32]byte, error) {
	return _Election.Contract.HashHeader(&_Election.CallOpts, header)
}

// HashHeader is a free data retrieval call binding the contract method 0x67960e91.
//
// Solidity: function hashHeader(bytes header) constant returns(bytes32)
func (_Election *ElectionCallerSession) HashHeader(header []byte) ([32]byte, error) {
	return _Election.Contract.HashHeader(&_Election.CallOpts, header)
}

// Initialized is a free data retrieval call binding the contract method 0x158ef93e.
//
// Solidity: function initialized() constant returns(bool)
func (_Election *ElectionCaller) Initialized(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Election.contract.Call(opts, out, "initialized")
	return *ret0, err
}

// Initialized is a free data retrieval call binding the contract method 0x158ef93e.
//
// Solidity: function initialized() constant returns(bool)
func (_Election *ElectionSession) Initialized() (bool, error) {
	return _Election.Contract.Initialized(&_Election.CallOpts)
}

// Initialized is a free data retrieval call binding the contract method 0x158ef93e.
//
// Solidity: function initialized() constant returns(bool)
func (_Election *ElectionCallerSession) Initialized() (bool, error) {
	return _Election.Contract.Initialized(&_Election.CallOpts)
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() constant returns(bool)
func (_Election *ElectionCaller) IsOwner(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Election.contract.Call(opts, out, "isOwner")
	return *ret0, err
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() constant returns(bool)
func (_Election *ElectionSession) IsOwner() (bool, error) {
	return _Election.Contract.IsOwner(&_Election.CallOpts)
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() constant returns(bool)
func (_Election *ElectionCallerSession) IsOwner() (bool, error) {
	return _Election.Contract.IsOwner(&_Election.CallOpts)
}

// MaxNumGroupsVotedFor is a free data retrieval call binding the contract method 0xac839d69.
//
// Solidity: function maxNumGroupsVotedFor() constant returns(uint256)
func (_Election *ElectionCaller) MaxNumGroupsVotedFor(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Election.contract.Call(opts, out, "maxNumGroupsVotedFor")
	return *ret0, err
}

// MaxNumGroupsVotedFor is a free data retrieval call binding the contract method 0xac839d69.
//
// Solidity: function maxNumGroupsVotedFor() constant returns(uint256)
func (_Election *ElectionSession) MaxNumGroupsVotedFor() (*big.Int, error) {
	return _Election.Contract.MaxNumGroupsVotedFor(&_Election.CallOpts)
}

// MaxNumGroupsVotedFor is a free data retrieval call binding the contract method 0xac839d69.
//
// Solidity: function maxNumGroupsVotedFor() constant returns(uint256)
func (_Election *ElectionCallerSession) MaxNumGroupsVotedFor() (*big.Int, error) {
	return _Election.Contract.MaxNumGroupsVotedFor(&_Election.CallOpts)
}

// MinQuorumSize is a free data retrieval call binding the contract method 0xe50e652d.
//
// Solidity: function minQuorumSize(uint256 blockNumber) constant returns(uint256)
func (_Election *ElectionCaller) MinQuorumSize(opts *bind.CallOpts, blockNumber *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Election.contract.Call(opts, out, "minQuorumSize", blockNumber)
	return *ret0, err
}

// MinQuorumSize is a free data retrieval call binding the contract method 0xe50e652d.
//
// Solidity: function minQuorumSize(uint256 blockNumber) constant returns(uint256)
func (_Election *ElectionSession) MinQuorumSize(blockNumber *big.Int) (*big.Int, error) {
	return _Election.Contract.MinQuorumSize(&_Election.CallOpts, blockNumber)
}

// MinQuorumSize is a free data retrieval call binding the contract method 0xe50e652d.
//
// Solidity: function minQuorumSize(uint256 blockNumber) constant returns(uint256)
func (_Election *ElectionCallerSession) MinQuorumSize(blockNumber *big.Int) (*big.Int, error) {
	return _Election.Contract.MinQuorumSize(&_Election.CallOpts, blockNumber)
}

// MinQuorumSizeInCurrentSet is a free data retrieval call binding the contract method 0x7385e5da.
//
// Solidity: function minQuorumSizeInCurrentSet() constant returns(uint256)
func (_Election *ElectionCaller) MinQuorumSizeInCurrentSet(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Election.contract.Call(opts, out, "minQuorumSizeInCurrentSet")
	return *ret0, err
}

// MinQuorumSizeInCurrentSet is a free data retrieval call binding the contract method 0x7385e5da.
//
// Solidity: function minQuorumSizeInCurrentSet() constant returns(uint256)
func (_Election *ElectionSession) MinQuorumSizeInCurrentSet() (*big.Int, error) {
	return _Election.Contract.MinQuorumSizeInCurrentSet(&_Election.CallOpts)
}

// MinQuorumSizeInCurrentSet is a free data retrieval call binding the contract method 0x7385e5da.
//
// Solidity: function minQuorumSizeInCurrentSet() constant returns(uint256)
func (_Election *ElectionCallerSession) MinQuorumSizeInCurrentSet() (*big.Int, error) {
	return _Election.Contract.MinQuorumSizeInCurrentSet(&_Election.CallOpts)
}

// NumberValidatorsInCurrentSet is a free data retrieval call binding the contract method 0x87ee8a0f.
//
// Solidity: function numberValidatorsInCurrentSet() constant returns(uint256)
func (_Election *ElectionCaller) NumberValidatorsInCurrentSet(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Election.contract.Call(opts, out, "numberValidatorsInCurrentSet")
	return *ret0, err
}

// NumberValidatorsInCurrentSet is a free data retrieval call binding the contract method 0x87ee8a0f.
//
// Solidity: function numberValidatorsInCurrentSet() constant returns(uint256)
func (_Election *ElectionSession) NumberValidatorsInCurrentSet() (*big.Int, error) {
	return _Election.Contract.NumberValidatorsInCurrentSet(&_Election.CallOpts)
}

// NumberValidatorsInCurrentSet is a free data retrieval call binding the contract method 0x87ee8a0f.
//
// Solidity: function numberValidatorsInCurrentSet() constant returns(uint256)
func (_Election *ElectionCallerSession) NumberValidatorsInCurrentSet() (*big.Int, error) {
	return _Election.Contract.NumberValidatorsInCurrentSet(&_Election.CallOpts)
}

// NumberValidatorsInSet is a free data retrieval call binding the contract method 0x9b2b592f.
//
// Solidity: function numberValidatorsInSet(uint256 blockNumber) constant returns(uint256)
func (_Election *ElectionCaller) NumberValidatorsInSet(opts *bind.CallOpts, blockNumber *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Election.contract.Call(opts, out, "numberValidatorsInSet", blockNumber)
	return *ret0, err
}

// NumberValidatorsInSet is a free data retrieval call binding the contract method 0x9b2b592f.
//
// Solidity: function numberValidatorsInSet(uint256 blockNumber) constant returns(uint256)
func (_Election *ElectionSession) NumberValidatorsInSet(blockNumber *big.Int) (*big.Int, error) {
	return _Election.Contract.NumberValidatorsInSet(&_Election.CallOpts, blockNumber)
}

// NumberValidatorsInSet is a free data retrieval call binding the contract method 0x9b2b592f.
//
// Solidity: function numberValidatorsInSet(uint256 blockNumber) constant returns(uint256)
func (_Election *ElectionCallerSession) NumberValidatorsInSet(blockNumber *big.Int) (*big.Int, error) {
	return _Election.Contract.NumberValidatorsInSet(&_Election.CallOpts, blockNumber)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Election *ElectionCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Election.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Election *ElectionSession) Owner() (common.Address, error) {
	return _Election.Contract.Owner(&_Election.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Election *ElectionCallerSession) Owner() (common.Address, error) {
	return _Election.Contract.Owner(&_Election.CallOpts)
}

// Registry is a free data retrieval call binding the contract method 0x7b103999.
//
// Solidity: function registry() constant returns(address)
func (_Election *ElectionCaller) Registry(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Election.contract.Call(opts, out, "registry")
	return *ret0, err
}

// Registry is a free data retrieval call binding the contract method 0x7b103999.
//
// Solidity: function registry() constant returns(address)
func (_Election *ElectionSession) Registry() (common.Address, error) {
	return _Election.Contract.Registry(&_Election.CallOpts)
}

// Registry is a free data retrieval call binding the contract method 0x7b103999.
//
// Solidity: function registry() constant returns(address)
func (_Election *ElectionCallerSession) Registry() (common.Address, error) {
	return _Election.Contract.Registry(&_Election.CallOpts)
}

// ValidatorSignerAddressFromCurrentSet is a free data retrieval call binding the contract method 0x123633ea.
//
// Solidity: function validatorSignerAddressFromCurrentSet(uint256 index) constant returns(address)
func (_Election *ElectionCaller) ValidatorSignerAddressFromCurrentSet(opts *bind.CallOpts, index *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Election.contract.Call(opts, out, "validatorSignerAddressFromCurrentSet", index)
	return *ret0, err
}

// ValidatorSignerAddressFromCurrentSet is a free data retrieval call binding the contract method 0x123633ea.
//
// Solidity: function validatorSignerAddressFromCurrentSet(uint256 index) constant returns(address)
func (_Election *ElectionSession) ValidatorSignerAddressFromCurrentSet(index *big.Int) (common.Address, error) {
	return _Election.Contract.ValidatorSignerAddressFromCurrentSet(&_Election.CallOpts, index)
}

// ValidatorSignerAddressFromCurrentSet is a free data retrieval call binding the contract method 0x123633ea.
//
// Solidity: function validatorSignerAddressFromCurrentSet(uint256 index) constant returns(address)
func (_Election *ElectionCallerSession) ValidatorSignerAddressFromCurrentSet(index *big.Int) (common.Address, error) {
	return _Election.Contract.ValidatorSignerAddressFromCurrentSet(&_Election.CallOpts, index)
}

// ValidatorSignerAddressFromSet is a free data retrieval call binding the contract method 0x5d180adb.
//
// Solidity: function validatorSignerAddressFromSet(uint256 index, uint256 blockNumber) constant returns(address)
func (_Election *ElectionCaller) ValidatorSignerAddressFromSet(opts *bind.CallOpts, index *big.Int, blockNumber *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Election.contract.Call(opts, out, "validatorSignerAddressFromSet", index, blockNumber)
	return *ret0, err
}

// ValidatorSignerAddressFromSet is a free data retrieval call binding the contract method 0x5d180adb.
//
// Solidity: function validatorSignerAddressFromSet(uint256 index, uint256 blockNumber) constant returns(address)
func (_Election *ElectionSession) ValidatorSignerAddressFromSet(index *big.Int, blockNumber *big.Int) (common.Address, error) {
	return _Election.Contract.ValidatorSignerAddressFromSet(&_Election.CallOpts, index, blockNumber)
}

// ValidatorSignerAddressFromSet is a free data retrieval call binding the contract method 0x5d180adb.
//
// Solidity: function validatorSignerAddressFromSet(uint256 index, uint256 blockNumber) constant returns(address)
func (_Election *ElectionCallerSession) ValidatorSignerAddressFromSet(index *big.Int, blockNumber *big.Int) (common.Address, error) {
	return _Election.Contract.ValidatorSignerAddressFromSet(&_Election.CallOpts, index, blockNumber)
}

// Activate is a paid mutator transaction binding the contract method 0x1c5a9d9c.
//
// Solidity: function activate(address group) returns(bool)
func (_Election *ElectionTransactor) Activate(opts *bind.TransactOpts, group common.Address) (*types.Transaction, error) {
	return _Election.contract.Transact(opts, "activate", group)
}

// Activate is a paid mutator transaction binding the contract method 0x1c5a9d9c.
//
// Solidity: function activate(address group) returns(bool)
func (_Election *ElectionSession) Activate(group common.Address) (*types.Transaction, error) {
	return _Election.Contract.Activate(&_Election.TransactOpts, group)
}

// Activate is a paid mutator transaction binding the contract method 0x1c5a9d9c.
//
// Solidity: function activate(address group) returns(bool)
func (_Election *ElectionTransactorSession) Activate(group common.Address) (*types.Transaction, error) {
	return _Election.Contract.Activate(&_Election.TransactOpts, group)
}

// DistributeEpochRewards is a paid mutator transaction binding the contract method 0x12541a6b.
//
// Solidity: function distributeEpochRewards(address group, uint256 value, address lesser, address greater) returns()
func (_Election *ElectionTransactor) DistributeEpochRewards(opts *bind.TransactOpts, group common.Address, value *big.Int, lesser common.Address, greater common.Address) (*types.Transaction, error) {
	return _Election.contract.Transact(opts, "distributeEpochRewards", group, value, lesser, greater)
}

// DistributeEpochRewards is a paid mutator transaction binding the contract method 0x12541a6b.
//
// Solidity: function distributeEpochRewards(address group, uint256 value, address lesser, address greater) returns()
func (_Election *ElectionSession) DistributeEpochRewards(group common.Address, value *big.Int, lesser common.Address, greater common.Address) (*types.Transaction, error) {
	return _Election.Contract.DistributeEpochRewards(&_Election.TransactOpts, group, value, lesser, greater)
}

// DistributeEpochRewards is a paid mutator transaction binding the contract method 0x12541a6b.
//
// Solidity: function distributeEpochRewards(address group, uint256 value, address lesser, address greater) returns()
func (_Election *ElectionTransactorSession) DistributeEpochRewards(group common.Address, value *big.Int, lesser common.Address, greater common.Address) (*types.Transaction, error) {
	return _Election.Contract.DistributeEpochRewards(&_Election.TransactOpts, group, value, lesser, greater)
}

// ForceDecrementVotes is a paid mutator transaction binding the contract method 0x8ef01def.
//
// Solidity: function forceDecrementVotes(address account, uint256 value, address[] lessers, address[] greaters, uint256[] indices) returns(uint256)
func (_Election *ElectionTransactor) ForceDecrementVotes(opts *bind.TransactOpts, account common.Address, value *big.Int, lessers []common.Address, greaters []common.Address, indices []*big.Int) (*types.Transaction, error) {
	return _Election.contract.Transact(opts, "forceDecrementVotes", account, value, lessers, greaters, indices)
}

// ForceDecrementVotes is a paid mutator transaction binding the contract method 0x8ef01def.
//
// Solidity: function forceDecrementVotes(address account, uint256 value, address[] lessers, address[] greaters, uint256[] indices) returns(uint256)
func (_Election *ElectionSession) ForceDecrementVotes(account common.Address, value *big.Int, lessers []common.Address, greaters []common.Address, indices []*big.Int) (*types.Transaction, error) {
	return _Election.Contract.ForceDecrementVotes(&_Election.TransactOpts, account, value, lessers, greaters, indices)
}

// ForceDecrementVotes is a paid mutator transaction binding the contract method 0x8ef01def.
//
// Solidity: function forceDecrementVotes(address account, uint256 value, address[] lessers, address[] greaters, uint256[] indices) returns(uint256)
func (_Election *ElectionTransactorSession) ForceDecrementVotes(account common.Address, value *big.Int, lessers []common.Address, greaters []common.Address, indices []*big.Int) (*types.Transaction, error) {
	return _Election.Contract.ForceDecrementVotes(&_Election.TransactOpts, account, value, lessers, greaters, indices)
}

// Initialize is a paid mutator transaction binding the contract method 0xf92ad219.
//
// Solidity: function initialize(address registryAddress, uint256 minElectableValidators, uint256 maxElectableValidators, uint256 _maxNumGroupsVotedFor, uint256 _electabilityThreshold) returns()
func (_Election *ElectionTransactor) Initialize(opts *bind.TransactOpts, registryAddress common.Address, minElectableValidators *big.Int, maxElectableValidators *big.Int, _maxNumGroupsVotedFor *big.Int, _electabilityThreshold *big.Int) (*types.Transaction, error) {
	return _Election.contract.Transact(opts, "initialize", registryAddress, minElectableValidators, maxElectableValidators, _maxNumGroupsVotedFor, _electabilityThreshold)
}

// Initialize is a paid mutator transaction binding the contract method 0xf92ad219.
//
// Solidity: function initialize(address registryAddress, uint256 minElectableValidators, uint256 maxElectableValidators, uint256 _maxNumGroupsVotedFor, uint256 _electabilityThreshold) returns()
func (_Election *ElectionSession) Initialize(registryAddress common.Address, minElectableValidators *big.Int, maxElectableValidators *big.Int, _maxNumGroupsVotedFor *big.Int, _electabilityThreshold *big.Int) (*types.Transaction, error) {
	return _Election.Contract.Initialize(&_Election.TransactOpts, registryAddress, minElectableValidators, maxElectableValidators, _maxNumGroupsVotedFor, _electabilityThreshold)
}

// Initialize is a paid mutator transaction binding the contract method 0xf92ad219.
//
// Solidity: function initialize(address registryAddress, uint256 minElectableValidators, uint256 maxElectableValidators, uint256 _maxNumGroupsVotedFor, uint256 _electabilityThreshold) returns()
func (_Election *ElectionTransactorSession) Initialize(registryAddress common.Address, minElectableValidators *big.Int, maxElectableValidators *big.Int, _maxNumGroupsVotedFor *big.Int, _electabilityThreshold *big.Int) (*types.Transaction, error) {
	return _Election.Contract.Initialize(&_Election.TransactOpts, registryAddress, minElectableValidators, maxElectableValidators, _maxNumGroupsVotedFor, _electabilityThreshold)
}

// MarkGroupEligible is a paid mutator transaction binding the contract method 0xa18fb2db.
//
// Solidity: function markGroupEligible(address group, address lesser, address greater) returns()
func (_Election *ElectionTransactor) MarkGroupEligible(opts *bind.TransactOpts, group common.Address, lesser common.Address, greater common.Address) (*types.Transaction, error) {
	return _Election.contract.Transact(opts, "markGroupEligible", group, lesser, greater)
}

// MarkGroupEligible is a paid mutator transaction binding the contract method 0xa18fb2db.
//
// Solidity: function markGroupEligible(address group, address lesser, address greater) returns()
func (_Election *ElectionSession) MarkGroupEligible(group common.Address, lesser common.Address, greater common.Address) (*types.Transaction, error) {
	return _Election.Contract.MarkGroupEligible(&_Election.TransactOpts, group, lesser, greater)
}

// MarkGroupEligible is a paid mutator transaction binding the contract method 0xa18fb2db.
//
// Solidity: function markGroupEligible(address group, address lesser, address greater) returns()
func (_Election *ElectionTransactorSession) MarkGroupEligible(group common.Address, lesser common.Address, greater common.Address) (*types.Transaction, error) {
	return _Election.Contract.MarkGroupEligible(&_Election.TransactOpts, group, lesser, greater)
}

// MarkGroupIneligible is a paid mutator transaction binding the contract method 0xa8e45871.
//
// Solidity: function markGroupIneligible(address group) returns()
func (_Election *ElectionTransactor) MarkGroupIneligible(opts *bind.TransactOpts, group common.Address) (*types.Transaction, error) {
	return _Election.contract.Transact(opts, "markGroupIneligible", group)
}

// MarkGroupIneligible is a paid mutator transaction binding the contract method 0xa8e45871.
//
// Solidity: function markGroupIneligible(address group) returns()
func (_Election *ElectionSession) MarkGroupIneligible(group common.Address) (*types.Transaction, error) {
	return _Election.Contract.MarkGroupIneligible(&_Election.TransactOpts, group)
}

// MarkGroupIneligible is a paid mutator transaction binding the contract method 0xa8e45871.
//
// Solidity: function markGroupIneligible(address group) returns()
func (_Election *ElectionTransactorSession) MarkGroupIneligible(group common.Address) (*types.Transaction, error) {
	return _Election.Contract.MarkGroupIneligible(&_Election.TransactOpts, group)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Election *ElectionTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Election.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Election *ElectionSession) RenounceOwnership() (*types.Transaction, error) {
	return _Election.Contract.RenounceOwnership(&_Election.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Election *ElectionTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Election.Contract.RenounceOwnership(&_Election.TransactOpts)
}

// RevokeActive is a paid mutator transaction binding the contract method 0x6e198475.
//
// Solidity: function revokeActive(address group, uint256 value, address lesser, address greater, uint256 index) returns(bool)
func (_Election *ElectionTransactor) RevokeActive(opts *bind.TransactOpts, group common.Address, value *big.Int, lesser common.Address, greater common.Address, index *big.Int) (*types.Transaction, error) {
	return _Election.contract.Transact(opts, "revokeActive", group, value, lesser, greater, index)
}

// RevokeActive is a paid mutator transaction binding the contract method 0x6e198475.
//
// Solidity: function revokeActive(address group, uint256 value, address lesser, address greater, uint256 index) returns(bool)
func (_Election *ElectionSession) RevokeActive(group common.Address, value *big.Int, lesser common.Address, greater common.Address, index *big.Int) (*types.Transaction, error) {
	return _Election.Contract.RevokeActive(&_Election.TransactOpts, group, value, lesser, greater, index)
}

// RevokeActive is a paid mutator transaction binding the contract method 0x6e198475.
//
// Solidity: function revokeActive(address group, uint256 value, address lesser, address greater, uint256 index) returns(bool)
func (_Election *ElectionTransactorSession) RevokeActive(group common.Address, value *big.Int, lesser common.Address, greater common.Address, index *big.Int) (*types.Transaction, error) {
	return _Election.Contract.RevokeActive(&_Election.TransactOpts, group, value, lesser, greater, index)
}

// RevokePending is a paid mutator transaction binding the contract method 0x9dfb6081.
//
// Solidity: function revokePending(address group, uint256 value, address lesser, address greater, uint256 index) returns(bool)
func (_Election *ElectionTransactor) RevokePending(opts *bind.TransactOpts, group common.Address, value *big.Int, lesser common.Address, greater common.Address, index *big.Int) (*types.Transaction, error) {
	return _Election.contract.Transact(opts, "revokePending", group, value, lesser, greater, index)
}

// RevokePending is a paid mutator transaction binding the contract method 0x9dfb6081.
//
// Solidity: function revokePending(address group, uint256 value, address lesser, address greater, uint256 index) returns(bool)
func (_Election *ElectionSession) RevokePending(group common.Address, value *big.Int, lesser common.Address, greater common.Address, index *big.Int) (*types.Transaction, error) {
	return _Election.Contract.RevokePending(&_Election.TransactOpts, group, value, lesser, greater, index)
}

// RevokePending is a paid mutator transaction binding the contract method 0x9dfb6081.
//
// Solidity: function revokePending(address group, uint256 value, address lesser, address greater, uint256 index) returns(bool)
func (_Election *ElectionTransactorSession) RevokePending(group common.Address, value *big.Int, lesser common.Address, greater common.Address, index *big.Int) (*types.Transaction, error) {
	return _Election.Contract.RevokePending(&_Election.TransactOpts, group, value, lesser, greater, index)
}

// SetElectabilityThreshold is a paid mutator transaction binding the contract method 0x631db7e7.
//
// Solidity: function setElectabilityThreshold(uint256 threshold) returns(bool)
func (_Election *ElectionTransactor) SetElectabilityThreshold(opts *bind.TransactOpts, threshold *big.Int) (*types.Transaction, error) {
	return _Election.contract.Transact(opts, "setElectabilityThreshold", threshold)
}

// SetElectabilityThreshold is a paid mutator transaction binding the contract method 0x631db7e7.
//
// Solidity: function setElectabilityThreshold(uint256 threshold) returns(bool)
func (_Election *ElectionSession) SetElectabilityThreshold(threshold *big.Int) (*types.Transaction, error) {
	return _Election.Contract.SetElectabilityThreshold(&_Election.TransactOpts, threshold)
}

// SetElectabilityThreshold is a paid mutator transaction binding the contract method 0x631db7e7.
//
// Solidity: function setElectabilityThreshold(uint256 threshold) returns(bool)
func (_Election *ElectionTransactorSession) SetElectabilityThreshold(threshold *big.Int) (*types.Transaction, error) {
	return _Election.Contract.SetElectabilityThreshold(&_Election.TransactOpts, threshold)
}

// SetElectableValidators is a paid mutator transaction binding the contract method 0xf911f0b7.
//
// Solidity: function setElectableValidators(uint256 min, uint256 max) returns(bool)
func (_Election *ElectionTransactor) SetElectableValidators(opts *bind.TransactOpts, min *big.Int, max *big.Int) (*types.Transaction, error) {
	return _Election.contract.Transact(opts, "setElectableValidators", min, max)
}

// SetElectableValidators is a paid mutator transaction binding the contract method 0xf911f0b7.
//
// Solidity: function setElectableValidators(uint256 min, uint256 max) returns(bool)
func (_Election *ElectionSession) SetElectableValidators(min *big.Int, max *big.Int) (*types.Transaction, error) {
	return _Election.Contract.SetElectableValidators(&_Election.TransactOpts, min, max)
}

// SetElectableValidators is a paid mutator transaction binding the contract method 0xf911f0b7.
//
// Solidity: function setElectableValidators(uint256 min, uint256 max) returns(bool)
func (_Election *ElectionTransactorSession) SetElectableValidators(min *big.Int, max *big.Int) (*types.Transaction, error) {
	return _Election.Contract.SetElectableValidators(&_Election.TransactOpts, min, max)
}

// SetMaxNumGroupsVotedFor is a paid mutator transaction binding the contract method 0x3c55a73c.
//
// Solidity: function setMaxNumGroupsVotedFor(uint256 _maxNumGroupsVotedFor) returns(bool)
func (_Election *ElectionTransactor) SetMaxNumGroupsVotedFor(opts *bind.TransactOpts, _maxNumGroupsVotedFor *big.Int) (*types.Transaction, error) {
	return _Election.contract.Transact(opts, "setMaxNumGroupsVotedFor", _maxNumGroupsVotedFor)
}

// SetMaxNumGroupsVotedFor is a paid mutator transaction binding the contract method 0x3c55a73c.
//
// Solidity: function setMaxNumGroupsVotedFor(uint256 _maxNumGroupsVotedFor) returns(bool)
func (_Election *ElectionSession) SetMaxNumGroupsVotedFor(_maxNumGroupsVotedFor *big.Int) (*types.Transaction, error) {
	return _Election.Contract.SetMaxNumGroupsVotedFor(&_Election.TransactOpts, _maxNumGroupsVotedFor)
}

// SetMaxNumGroupsVotedFor is a paid mutator transaction binding the contract method 0x3c55a73c.
//
// Solidity: function setMaxNumGroupsVotedFor(uint256 _maxNumGroupsVotedFor) returns(bool)
func (_Election *ElectionTransactorSession) SetMaxNumGroupsVotedFor(_maxNumGroupsVotedFor *big.Int) (*types.Transaction, error) {
	return _Election.Contract.SetMaxNumGroupsVotedFor(&_Election.TransactOpts, _maxNumGroupsVotedFor)
}

// SetRegistry is a paid mutator transaction binding the contract method 0xa91ee0dc.
//
// Solidity: function setRegistry(address registryAddress) returns()
func (_Election *ElectionTransactor) SetRegistry(opts *bind.TransactOpts, registryAddress common.Address) (*types.Transaction, error) {
	return _Election.contract.Transact(opts, "setRegistry", registryAddress)
}

// SetRegistry is a paid mutator transaction binding the contract method 0xa91ee0dc.
//
// Solidity: function setRegistry(address registryAddress) returns()
func (_Election *ElectionSession) SetRegistry(registryAddress common.Address) (*types.Transaction, error) {
	return _Election.Contract.SetRegistry(&_Election.TransactOpts, registryAddress)
}

// SetRegistry is a paid mutator transaction binding the contract method 0xa91ee0dc.
//
// Solidity: function setRegistry(address registryAddress) returns()
func (_Election *ElectionTransactorSession) SetRegistry(registryAddress common.Address) (*types.Transaction, error) {
	return _Election.Contract.SetRegistry(&_Election.TransactOpts, registryAddress)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Election *ElectionTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Election.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Election *ElectionSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Election.Contract.TransferOwnership(&_Election.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Election *ElectionTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Election.Contract.TransferOwnership(&_Election.TransactOpts, newOwner)
}

// Vote is a paid mutator transaction binding the contract method 0x580d747a.
//
// Solidity: function vote(address group, uint256 value, address lesser, address greater) returns(bool)
func (_Election *ElectionTransactor) Vote(opts *bind.TransactOpts, group common.Address, value *big.Int, lesser common.Address, greater common.Address) (*types.Transaction, error) {
	return _Election.contract.Transact(opts, "vote", group, value, lesser, greater)
}

// Vote is a paid mutator transaction binding the contract method 0x580d747a.
//
// Solidity: function vote(address group, uint256 value, address lesser, address greater) returns(bool)
func (_Election *ElectionSession) Vote(group common.Address, value *big.Int, lesser common.Address, greater common.Address) (*types.Transaction, error) {
	return _Election.Contract.Vote(&_Election.TransactOpts, group, value, lesser, greater)
}

// Vote is a paid mutator transaction binding the contract method 0x580d747a.
//
// Solidity: function vote(address group, uint256 value, address lesser, address greater) returns(bool)
func (_Election *ElectionTransactorSession) Vote(group common.Address, value *big.Int, lesser common.Address, greater common.Address) (*types.Transaction, error) {
	return _Election.Contract.Vote(&_Election.TransactOpts, group, value, lesser, greater)
}

// ElectionElectabilityThresholdSetIterator is returned from FilterElectabilityThresholdSet and is used to iterate over the raw logs and unpacked data for ElectabilityThresholdSet events raised by the Election contract.
type ElectionElectabilityThresholdSetIterator struct {
	Event *ElectionElectabilityThresholdSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ElectionElectabilityThresholdSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ElectionElectabilityThresholdSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ElectionElectabilityThresholdSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ElectionElectabilityThresholdSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ElectionElectabilityThresholdSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ElectionElectabilityThresholdSet represents a ElectabilityThresholdSet event raised by the Election contract.
type ElectionElectabilityThresholdSet struct {
	ElectabilityThreshold *big.Int
	Raw                   types.Log // Blockchain specific contextual infos
}

// FilterElectabilityThresholdSet is a free log retrieval operation binding the contract event 0x9854be03126e38f9c318d8aabe1b150d09cb3a57059b21855b1e11d44e082c1a.
//
// Solidity: event ElectabilityThresholdSet(uint256 electabilityThreshold)
func (_Election *ElectionFilterer) FilterElectabilityThresholdSet(opts *bind.FilterOpts) (*ElectionElectabilityThresholdSetIterator, error) {

	logs, sub, err := _Election.contract.FilterLogs(opts, "ElectabilityThresholdSet")
	if err != nil {
		return nil, err
	}
	return &ElectionElectabilityThresholdSetIterator{contract: _Election.contract, event: "ElectabilityThresholdSet", logs: logs, sub: sub}, nil
}

// WatchElectabilityThresholdSet is a free log subscription operation binding the contract event 0x9854be03126e38f9c318d8aabe1b150d09cb3a57059b21855b1e11d44e082c1a.
//
// Solidity: event ElectabilityThresholdSet(uint256 electabilityThreshold)
func (_Election *ElectionFilterer) WatchElectabilityThresholdSet(opts *bind.WatchOpts, sink chan<- *ElectionElectabilityThresholdSet) (event.Subscription, error) {

	logs, sub, err := _Election.contract.WatchLogs(opts, "ElectabilityThresholdSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ElectionElectabilityThresholdSet)
				if err := _Election.contract.UnpackLog(event, "ElectabilityThresholdSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseElectabilityThresholdSet is a log parse operation binding the contract event 0x9854be03126e38f9c318d8aabe1b150d09cb3a57059b21855b1e11d44e082c1a.
//
// Solidity: event ElectabilityThresholdSet(uint256 electabilityThreshold)
func (_Election *ElectionFilterer) ParseElectabilityThresholdSet(log types.Log) (*ElectionElectabilityThresholdSet, error) {
	event := new(ElectionElectabilityThresholdSet)
	if err := _Election.contract.UnpackLog(event, "ElectabilityThresholdSet", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ElectionElectableValidatorsSetIterator is returned from FilterElectableValidatorsSet and is used to iterate over the raw logs and unpacked data for ElectableValidatorsSet events raised by the Election contract.
type ElectionElectableValidatorsSetIterator struct {
	Event *ElectionElectableValidatorsSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ElectionElectableValidatorsSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ElectionElectableValidatorsSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ElectionElectableValidatorsSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ElectionElectableValidatorsSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ElectionElectableValidatorsSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ElectionElectableValidatorsSet represents a ElectableValidatorsSet event raised by the Election contract.
type ElectionElectableValidatorsSet struct {
	Min *big.Int
	Max *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterElectableValidatorsSet is a free log retrieval operation binding the contract event 0xb3ae64819ff89f6136eb58b8563cb32c6550f17eaf97f9ecc32f23783229f6de.
//
// Solidity: event ElectableValidatorsSet(uint256 min, uint256 max)
func (_Election *ElectionFilterer) FilterElectableValidatorsSet(opts *bind.FilterOpts) (*ElectionElectableValidatorsSetIterator, error) {

	logs, sub, err := _Election.contract.FilterLogs(opts, "ElectableValidatorsSet")
	if err != nil {
		return nil, err
	}
	return &ElectionElectableValidatorsSetIterator{contract: _Election.contract, event: "ElectableValidatorsSet", logs: logs, sub: sub}, nil
}

// WatchElectableValidatorsSet is a free log subscription operation binding the contract event 0xb3ae64819ff89f6136eb58b8563cb32c6550f17eaf97f9ecc32f23783229f6de.
//
// Solidity: event ElectableValidatorsSet(uint256 min, uint256 max)
func (_Election *ElectionFilterer) WatchElectableValidatorsSet(opts *bind.WatchOpts, sink chan<- *ElectionElectableValidatorsSet) (event.Subscription, error) {

	logs, sub, err := _Election.contract.WatchLogs(opts, "ElectableValidatorsSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ElectionElectableValidatorsSet)
				if err := _Election.contract.UnpackLog(event, "ElectableValidatorsSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseElectableValidatorsSet is a log parse operation binding the contract event 0xb3ae64819ff89f6136eb58b8563cb32c6550f17eaf97f9ecc32f23783229f6de.
//
// Solidity: event ElectableValidatorsSet(uint256 min, uint256 max)
func (_Election *ElectionFilterer) ParseElectableValidatorsSet(log types.Log) (*ElectionElectableValidatorsSet, error) {
	event := new(ElectionElectableValidatorsSet)
	if err := _Election.contract.UnpackLog(event, "ElectableValidatorsSet", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ElectionEpochRewardsDistributedToVotersIterator is returned from FilterEpochRewardsDistributedToVoters and is used to iterate over the raw logs and unpacked data for EpochRewardsDistributedToVoters events raised by the Election contract.
type ElectionEpochRewardsDistributedToVotersIterator struct {
	Event *ElectionEpochRewardsDistributedToVoters // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ElectionEpochRewardsDistributedToVotersIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ElectionEpochRewardsDistributedToVoters)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ElectionEpochRewardsDistributedToVoters)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ElectionEpochRewardsDistributedToVotersIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ElectionEpochRewardsDistributedToVotersIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ElectionEpochRewardsDistributedToVoters represents a EpochRewardsDistributedToVoters event raised by the Election contract.
type ElectionEpochRewardsDistributedToVoters struct {
	Group common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterEpochRewardsDistributedToVoters is a free log retrieval operation binding the contract event 0x91ba34d62474c14d6c623cd322f4256666c7a45b7fdaa3378e009d39dfcec2a7.
//
// Solidity: event EpochRewardsDistributedToVoters(address indexed group, uint256 value)
func (_Election *ElectionFilterer) FilterEpochRewardsDistributedToVoters(opts *bind.FilterOpts, group []common.Address) (*ElectionEpochRewardsDistributedToVotersIterator, error) {

	var groupRule []interface{}
	for _, groupItem := range group {
		groupRule = append(groupRule, groupItem)
	}

	logs, sub, err := _Election.contract.FilterLogs(opts, "EpochRewardsDistributedToVoters", groupRule)
	if err != nil {
		return nil, err
	}
	return &ElectionEpochRewardsDistributedToVotersIterator{contract: _Election.contract, event: "EpochRewardsDistributedToVoters", logs: logs, sub: sub}, nil
}

// WatchEpochRewardsDistributedToVoters is a free log subscription operation binding the contract event 0x91ba34d62474c14d6c623cd322f4256666c7a45b7fdaa3378e009d39dfcec2a7.
//
// Solidity: event EpochRewardsDistributedToVoters(address indexed group, uint256 value)
func (_Election *ElectionFilterer) WatchEpochRewardsDistributedToVoters(opts *bind.WatchOpts, sink chan<- *ElectionEpochRewardsDistributedToVoters, group []common.Address) (event.Subscription, error) {

	var groupRule []interface{}
	for _, groupItem := range group {
		groupRule = append(groupRule, groupItem)
	}

	logs, sub, err := _Election.contract.WatchLogs(opts, "EpochRewardsDistributedToVoters", groupRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ElectionEpochRewardsDistributedToVoters)
				if err := _Election.contract.UnpackLog(event, "EpochRewardsDistributedToVoters", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEpochRewardsDistributedToVoters is a log parse operation binding the contract event 0x91ba34d62474c14d6c623cd322f4256666c7a45b7fdaa3378e009d39dfcec2a7.
//
// Solidity: event EpochRewardsDistributedToVoters(address indexed group, uint256 value)
func (_Election *ElectionFilterer) ParseEpochRewardsDistributedToVoters(log types.Log) (*ElectionEpochRewardsDistributedToVoters, error) {
	event := new(ElectionEpochRewardsDistributedToVoters)
	if err := _Election.contract.UnpackLog(event, "EpochRewardsDistributedToVoters", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ElectionMaxNumGroupsVotedForSetIterator is returned from FilterMaxNumGroupsVotedForSet and is used to iterate over the raw logs and unpacked data for MaxNumGroupsVotedForSet events raised by the Election contract.
type ElectionMaxNumGroupsVotedForSetIterator struct {
	Event *ElectionMaxNumGroupsVotedForSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ElectionMaxNumGroupsVotedForSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ElectionMaxNumGroupsVotedForSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ElectionMaxNumGroupsVotedForSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ElectionMaxNumGroupsVotedForSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ElectionMaxNumGroupsVotedForSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ElectionMaxNumGroupsVotedForSet represents a MaxNumGroupsVotedForSet event raised by the Election contract.
type ElectionMaxNumGroupsVotedForSet struct {
	MaxNumGroupsVotedFor *big.Int
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterMaxNumGroupsVotedForSet is a free log retrieval operation binding the contract event 0x1993a3864c31265ef86eec51d147eff697dee0466c92ac9abddcc4c4c6829348.
//
// Solidity: event MaxNumGroupsVotedForSet(uint256 maxNumGroupsVotedFor)
func (_Election *ElectionFilterer) FilterMaxNumGroupsVotedForSet(opts *bind.FilterOpts) (*ElectionMaxNumGroupsVotedForSetIterator, error) {

	logs, sub, err := _Election.contract.FilterLogs(opts, "MaxNumGroupsVotedForSet")
	if err != nil {
		return nil, err
	}
	return &ElectionMaxNumGroupsVotedForSetIterator{contract: _Election.contract, event: "MaxNumGroupsVotedForSet", logs: logs, sub: sub}, nil
}

// WatchMaxNumGroupsVotedForSet is a free log subscription operation binding the contract event 0x1993a3864c31265ef86eec51d147eff697dee0466c92ac9abddcc4c4c6829348.
//
// Solidity: event MaxNumGroupsVotedForSet(uint256 maxNumGroupsVotedFor)
func (_Election *ElectionFilterer) WatchMaxNumGroupsVotedForSet(opts *bind.WatchOpts, sink chan<- *ElectionMaxNumGroupsVotedForSet) (event.Subscription, error) {

	logs, sub, err := _Election.contract.WatchLogs(opts, "MaxNumGroupsVotedForSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ElectionMaxNumGroupsVotedForSet)
				if err := _Election.contract.UnpackLog(event, "MaxNumGroupsVotedForSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMaxNumGroupsVotedForSet is a log parse operation binding the contract event 0x1993a3864c31265ef86eec51d147eff697dee0466c92ac9abddcc4c4c6829348.
//
// Solidity: event MaxNumGroupsVotedForSet(uint256 maxNumGroupsVotedFor)
func (_Election *ElectionFilterer) ParseMaxNumGroupsVotedForSet(log types.Log) (*ElectionMaxNumGroupsVotedForSet, error) {
	event := new(ElectionMaxNumGroupsVotedForSet)
	if err := _Election.contract.UnpackLog(event, "MaxNumGroupsVotedForSet", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ElectionOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Election contract.
type ElectionOwnershipTransferredIterator struct {
	Event *ElectionOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ElectionOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ElectionOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ElectionOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ElectionOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ElectionOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ElectionOwnershipTransferred represents a OwnershipTransferred event raised by the Election contract.
type ElectionOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Election *ElectionFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ElectionOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Election.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ElectionOwnershipTransferredIterator{contract: _Election.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Election *ElectionFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ElectionOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Election.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ElectionOwnershipTransferred)
				if err := _Election.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Election *ElectionFilterer) ParseOwnershipTransferred(log types.Log) (*ElectionOwnershipTransferred, error) {
	event := new(ElectionOwnershipTransferred)
	if err := _Election.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ElectionRegistrySetIterator is returned from FilterRegistrySet and is used to iterate over the raw logs and unpacked data for RegistrySet events raised by the Election contract.
type ElectionRegistrySetIterator struct {
	Event *ElectionRegistrySet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ElectionRegistrySetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ElectionRegistrySet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ElectionRegistrySet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ElectionRegistrySetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ElectionRegistrySetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ElectionRegistrySet represents a RegistrySet event raised by the Election contract.
type ElectionRegistrySet struct {
	RegistryAddress common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterRegistrySet is a free log retrieval operation binding the contract event 0x27fe5f0c1c3b1ed427cc63d0f05759ffdecf9aec9e18d31ef366fc8a6cb5dc3b.
//
// Solidity: event RegistrySet(address indexed registryAddress)
func (_Election *ElectionFilterer) FilterRegistrySet(opts *bind.FilterOpts, registryAddress []common.Address) (*ElectionRegistrySetIterator, error) {

	var registryAddressRule []interface{}
	for _, registryAddressItem := range registryAddress {
		registryAddressRule = append(registryAddressRule, registryAddressItem)
	}

	logs, sub, err := _Election.contract.FilterLogs(opts, "RegistrySet", registryAddressRule)
	if err != nil {
		return nil, err
	}
	return &ElectionRegistrySetIterator{contract: _Election.contract, event: "RegistrySet", logs: logs, sub: sub}, nil
}

// WatchRegistrySet is a free log subscription operation binding the contract event 0x27fe5f0c1c3b1ed427cc63d0f05759ffdecf9aec9e18d31ef366fc8a6cb5dc3b.
//
// Solidity: event RegistrySet(address indexed registryAddress)
func (_Election *ElectionFilterer) WatchRegistrySet(opts *bind.WatchOpts, sink chan<- *ElectionRegistrySet, registryAddress []common.Address) (event.Subscription, error) {

	var registryAddressRule []interface{}
	for _, registryAddressItem := range registryAddress {
		registryAddressRule = append(registryAddressRule, registryAddressItem)
	}

	logs, sub, err := _Election.contract.WatchLogs(opts, "RegistrySet", registryAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ElectionRegistrySet)
				if err := _Election.contract.UnpackLog(event, "RegistrySet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegistrySet is a log parse operation binding the contract event 0x27fe5f0c1c3b1ed427cc63d0f05759ffdecf9aec9e18d31ef366fc8a6cb5dc3b.
//
// Solidity: event RegistrySet(address indexed registryAddress)
func (_Election *ElectionFilterer) ParseRegistrySet(log types.Log) (*ElectionRegistrySet, error) {
	event := new(ElectionRegistrySet)
	if err := _Election.contract.UnpackLog(event, "RegistrySet", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ElectionValidatorGroupActiveVoteRevokedIterator is returned from FilterValidatorGroupActiveVoteRevoked and is used to iterate over the raw logs and unpacked data for ValidatorGroupActiveVoteRevoked events raised by the Election contract.
type ElectionValidatorGroupActiveVoteRevokedIterator struct {
	Event *ElectionValidatorGroupActiveVoteRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ElectionValidatorGroupActiveVoteRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ElectionValidatorGroupActiveVoteRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ElectionValidatorGroupActiveVoteRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ElectionValidatorGroupActiveVoteRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ElectionValidatorGroupActiveVoteRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ElectionValidatorGroupActiveVoteRevoked represents a ValidatorGroupActiveVoteRevoked event raised by the Election contract.
type ElectionValidatorGroupActiveVoteRevoked struct {
	Account common.Address
	Group   common.Address
	Value   *big.Int
	Units   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterValidatorGroupActiveVoteRevoked is a free log retrieval operation binding the contract event 0xae7458f8697a680da6be36406ea0b8f40164915ac9cc40c0dad05a2ff6e8c6a8.
//
// Solidity: event ValidatorGroupActiveVoteRevoked(address indexed account, address indexed group, uint256 value, uint256 units)
func (_Election *ElectionFilterer) FilterValidatorGroupActiveVoteRevoked(opts *bind.FilterOpts, account []common.Address, group []common.Address) (*ElectionValidatorGroupActiveVoteRevokedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var groupRule []interface{}
	for _, groupItem := range group {
		groupRule = append(groupRule, groupItem)
	}

	logs, sub, err := _Election.contract.FilterLogs(opts, "ValidatorGroupActiveVoteRevoked", accountRule, groupRule)
	if err != nil {
		return nil, err
	}
	return &ElectionValidatorGroupActiveVoteRevokedIterator{contract: _Election.contract, event: "ValidatorGroupActiveVoteRevoked", logs: logs, sub: sub}, nil
}

// WatchValidatorGroupActiveVoteRevoked is a free log subscription operation binding the contract event 0xae7458f8697a680da6be36406ea0b8f40164915ac9cc40c0dad05a2ff6e8c6a8.
//
// Solidity: event ValidatorGroupActiveVoteRevoked(address indexed account, address indexed group, uint256 value, uint256 units)
func (_Election *ElectionFilterer) WatchValidatorGroupActiveVoteRevoked(opts *bind.WatchOpts, sink chan<- *ElectionValidatorGroupActiveVoteRevoked, account []common.Address, group []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var groupRule []interface{}
	for _, groupItem := range group {
		groupRule = append(groupRule, groupItem)
	}

	logs, sub, err := _Election.contract.WatchLogs(opts, "ValidatorGroupActiveVoteRevoked", accountRule, groupRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ElectionValidatorGroupActiveVoteRevoked)
				if err := _Election.contract.UnpackLog(event, "ValidatorGroupActiveVoteRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorGroupActiveVoteRevoked is a log parse operation binding the contract event 0xae7458f8697a680da6be36406ea0b8f40164915ac9cc40c0dad05a2ff6e8c6a8.
//
// Solidity: event ValidatorGroupActiveVoteRevoked(address indexed account, address indexed group, uint256 value, uint256 units)
func (_Election *ElectionFilterer) ParseValidatorGroupActiveVoteRevoked(log types.Log) (*ElectionValidatorGroupActiveVoteRevoked, error) {
	event := new(ElectionValidatorGroupActiveVoteRevoked)
	if err := _Election.contract.UnpackLog(event, "ValidatorGroupActiveVoteRevoked", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ElectionValidatorGroupMarkedEligibleIterator is returned from FilterValidatorGroupMarkedEligible and is used to iterate over the raw logs and unpacked data for ValidatorGroupMarkedEligible events raised by the Election contract.
type ElectionValidatorGroupMarkedEligibleIterator struct {
	Event *ElectionValidatorGroupMarkedEligible // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ElectionValidatorGroupMarkedEligibleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ElectionValidatorGroupMarkedEligible)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ElectionValidatorGroupMarkedEligible)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ElectionValidatorGroupMarkedEligibleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ElectionValidatorGroupMarkedEligibleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ElectionValidatorGroupMarkedEligible represents a ValidatorGroupMarkedEligible event raised by the Election contract.
type ElectionValidatorGroupMarkedEligible struct {
	Group common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterValidatorGroupMarkedEligible is a free log retrieval operation binding the contract event 0x8f21dc7ff6f55d73e4fca52a4ef4fcc14fbda43ac338d24922519d51455d39c1.
//
// Solidity: event ValidatorGroupMarkedEligible(address indexed group)
func (_Election *ElectionFilterer) FilterValidatorGroupMarkedEligible(opts *bind.FilterOpts, group []common.Address) (*ElectionValidatorGroupMarkedEligibleIterator, error) {

	var groupRule []interface{}
	for _, groupItem := range group {
		groupRule = append(groupRule, groupItem)
	}

	logs, sub, err := _Election.contract.FilterLogs(opts, "ValidatorGroupMarkedEligible", groupRule)
	if err != nil {
		return nil, err
	}
	return &ElectionValidatorGroupMarkedEligibleIterator{contract: _Election.contract, event: "ValidatorGroupMarkedEligible", logs: logs, sub: sub}, nil
}

// WatchValidatorGroupMarkedEligible is a free log subscription operation binding the contract event 0x8f21dc7ff6f55d73e4fca52a4ef4fcc14fbda43ac338d24922519d51455d39c1.
//
// Solidity: event ValidatorGroupMarkedEligible(address indexed group)
func (_Election *ElectionFilterer) WatchValidatorGroupMarkedEligible(opts *bind.WatchOpts, sink chan<- *ElectionValidatorGroupMarkedEligible, group []common.Address) (event.Subscription, error) {

	var groupRule []interface{}
	for _, groupItem := range group {
		groupRule = append(groupRule, groupItem)
	}

	logs, sub, err := _Election.contract.WatchLogs(opts, "ValidatorGroupMarkedEligible", groupRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ElectionValidatorGroupMarkedEligible)
				if err := _Election.contract.UnpackLog(event, "ValidatorGroupMarkedEligible", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorGroupMarkedEligible is a log parse operation binding the contract event 0x8f21dc7ff6f55d73e4fca52a4ef4fcc14fbda43ac338d24922519d51455d39c1.
//
// Solidity: event ValidatorGroupMarkedEligible(address indexed group)
func (_Election *ElectionFilterer) ParseValidatorGroupMarkedEligible(log types.Log) (*ElectionValidatorGroupMarkedEligible, error) {
	event := new(ElectionValidatorGroupMarkedEligible)
	if err := _Election.contract.UnpackLog(event, "ValidatorGroupMarkedEligible", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ElectionValidatorGroupMarkedIneligibleIterator is returned from FilterValidatorGroupMarkedIneligible and is used to iterate over the raw logs and unpacked data for ValidatorGroupMarkedIneligible events raised by the Election contract.
type ElectionValidatorGroupMarkedIneligibleIterator struct {
	Event *ElectionValidatorGroupMarkedIneligible // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ElectionValidatorGroupMarkedIneligibleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ElectionValidatorGroupMarkedIneligible)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ElectionValidatorGroupMarkedIneligible)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ElectionValidatorGroupMarkedIneligibleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ElectionValidatorGroupMarkedIneligibleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ElectionValidatorGroupMarkedIneligible represents a ValidatorGroupMarkedIneligible event raised by the Election contract.
type ElectionValidatorGroupMarkedIneligible struct {
	Group common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterValidatorGroupMarkedIneligible is a free log retrieval operation binding the contract event 0x5c8cd4e832f3a7d79f9208c2acf25a412143aa3f751cfd3728c42a0fea4921a8.
//
// Solidity: event ValidatorGroupMarkedIneligible(address indexed group)
func (_Election *ElectionFilterer) FilterValidatorGroupMarkedIneligible(opts *bind.FilterOpts, group []common.Address) (*ElectionValidatorGroupMarkedIneligibleIterator, error) {

	var groupRule []interface{}
	for _, groupItem := range group {
		groupRule = append(groupRule, groupItem)
	}

	logs, sub, err := _Election.contract.FilterLogs(opts, "ValidatorGroupMarkedIneligible", groupRule)
	if err != nil {
		return nil, err
	}
	return &ElectionValidatorGroupMarkedIneligibleIterator{contract: _Election.contract, event: "ValidatorGroupMarkedIneligible", logs: logs, sub: sub}, nil
}

// WatchValidatorGroupMarkedIneligible is a free log subscription operation binding the contract event 0x5c8cd4e832f3a7d79f9208c2acf25a412143aa3f751cfd3728c42a0fea4921a8.
//
// Solidity: event ValidatorGroupMarkedIneligible(address indexed group)
func (_Election *ElectionFilterer) WatchValidatorGroupMarkedIneligible(opts *bind.WatchOpts, sink chan<- *ElectionValidatorGroupMarkedIneligible, group []common.Address) (event.Subscription, error) {

	var groupRule []interface{}
	for _, groupItem := range group {
		groupRule = append(groupRule, groupItem)
	}

	logs, sub, err := _Election.contract.WatchLogs(opts, "ValidatorGroupMarkedIneligible", groupRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ElectionValidatorGroupMarkedIneligible)
				if err := _Election.contract.UnpackLog(event, "ValidatorGroupMarkedIneligible", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorGroupMarkedIneligible is a log parse operation binding the contract event 0x5c8cd4e832f3a7d79f9208c2acf25a412143aa3f751cfd3728c42a0fea4921a8.
//
// Solidity: event ValidatorGroupMarkedIneligible(address indexed group)
func (_Election *ElectionFilterer) ParseValidatorGroupMarkedIneligible(log types.Log) (*ElectionValidatorGroupMarkedIneligible, error) {
	event := new(ElectionValidatorGroupMarkedIneligible)
	if err := _Election.contract.UnpackLog(event, "ValidatorGroupMarkedIneligible", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ElectionValidatorGroupPendingVoteRevokedIterator is returned from FilterValidatorGroupPendingVoteRevoked and is used to iterate over the raw logs and unpacked data for ValidatorGroupPendingVoteRevoked events raised by the Election contract.
type ElectionValidatorGroupPendingVoteRevokedIterator struct {
	Event *ElectionValidatorGroupPendingVoteRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ElectionValidatorGroupPendingVoteRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ElectionValidatorGroupPendingVoteRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ElectionValidatorGroupPendingVoteRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ElectionValidatorGroupPendingVoteRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ElectionValidatorGroupPendingVoteRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ElectionValidatorGroupPendingVoteRevoked represents a ValidatorGroupPendingVoteRevoked event raised by the Election contract.
type ElectionValidatorGroupPendingVoteRevoked struct {
	Account common.Address
	Group   common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterValidatorGroupPendingVoteRevoked is a free log retrieval operation binding the contract event 0x148075455e24d5cf538793db3e917a157cbadac69dd6a304186daf11b23f76fe.
//
// Solidity: event ValidatorGroupPendingVoteRevoked(address indexed account, address indexed group, uint256 value)
func (_Election *ElectionFilterer) FilterValidatorGroupPendingVoteRevoked(opts *bind.FilterOpts, account []common.Address, group []common.Address) (*ElectionValidatorGroupPendingVoteRevokedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var groupRule []interface{}
	for _, groupItem := range group {
		groupRule = append(groupRule, groupItem)
	}

	logs, sub, err := _Election.contract.FilterLogs(opts, "ValidatorGroupPendingVoteRevoked", accountRule, groupRule)
	if err != nil {
		return nil, err
	}
	return &ElectionValidatorGroupPendingVoteRevokedIterator{contract: _Election.contract, event: "ValidatorGroupPendingVoteRevoked", logs: logs, sub: sub}, nil
}

// WatchValidatorGroupPendingVoteRevoked is a free log subscription operation binding the contract event 0x148075455e24d5cf538793db3e917a157cbadac69dd6a304186daf11b23f76fe.
//
// Solidity: event ValidatorGroupPendingVoteRevoked(address indexed account, address indexed group, uint256 value)
func (_Election *ElectionFilterer) WatchValidatorGroupPendingVoteRevoked(opts *bind.WatchOpts, sink chan<- *ElectionValidatorGroupPendingVoteRevoked, account []common.Address, group []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var groupRule []interface{}
	for _, groupItem := range group {
		groupRule = append(groupRule, groupItem)
	}

	logs, sub, err := _Election.contract.WatchLogs(opts, "ValidatorGroupPendingVoteRevoked", accountRule, groupRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ElectionValidatorGroupPendingVoteRevoked)
				if err := _Election.contract.UnpackLog(event, "ValidatorGroupPendingVoteRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorGroupPendingVoteRevoked is a log parse operation binding the contract event 0x148075455e24d5cf538793db3e917a157cbadac69dd6a304186daf11b23f76fe.
//
// Solidity: event ValidatorGroupPendingVoteRevoked(address indexed account, address indexed group, uint256 value)
func (_Election *ElectionFilterer) ParseValidatorGroupPendingVoteRevoked(log types.Log) (*ElectionValidatorGroupPendingVoteRevoked, error) {
	event := new(ElectionValidatorGroupPendingVoteRevoked)
	if err := _Election.contract.UnpackLog(event, "ValidatorGroupPendingVoteRevoked", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ElectionValidatorGroupVoteActivatedIterator is returned from FilterValidatorGroupVoteActivated and is used to iterate over the raw logs and unpacked data for ValidatorGroupVoteActivated events raised by the Election contract.
type ElectionValidatorGroupVoteActivatedIterator struct {
	Event *ElectionValidatorGroupVoteActivated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ElectionValidatorGroupVoteActivatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ElectionValidatorGroupVoteActivated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ElectionValidatorGroupVoteActivated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ElectionValidatorGroupVoteActivatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ElectionValidatorGroupVoteActivatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ElectionValidatorGroupVoteActivated represents a ValidatorGroupVoteActivated event raised by the Election contract.
type ElectionValidatorGroupVoteActivated struct {
	Account common.Address
	Group   common.Address
	Value   *big.Int
	Units   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterValidatorGroupVoteActivated is a free log retrieval operation binding the contract event 0x45aac85f38083b18efe2d441a65b9c1ae177c78307cb5a5d4aec8f7dbcaeabfe.
//
// Solidity: event ValidatorGroupVoteActivated(address indexed account, address indexed group, uint256 value, uint256 units)
func (_Election *ElectionFilterer) FilterValidatorGroupVoteActivated(opts *bind.FilterOpts, account []common.Address, group []common.Address) (*ElectionValidatorGroupVoteActivatedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var groupRule []interface{}
	for _, groupItem := range group {
		groupRule = append(groupRule, groupItem)
	}

	logs, sub, err := _Election.contract.FilterLogs(opts, "ValidatorGroupVoteActivated", accountRule, groupRule)
	if err != nil {
		return nil, err
	}
	return &ElectionValidatorGroupVoteActivatedIterator{contract: _Election.contract, event: "ValidatorGroupVoteActivated", logs: logs, sub: sub}, nil
}

// WatchValidatorGroupVoteActivated is a free log subscription operation binding the contract event 0x45aac85f38083b18efe2d441a65b9c1ae177c78307cb5a5d4aec8f7dbcaeabfe.
//
// Solidity: event ValidatorGroupVoteActivated(address indexed account, address indexed group, uint256 value, uint256 units)
func (_Election *ElectionFilterer) WatchValidatorGroupVoteActivated(opts *bind.WatchOpts, sink chan<- *ElectionValidatorGroupVoteActivated, account []common.Address, group []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var groupRule []interface{}
	for _, groupItem := range group {
		groupRule = append(groupRule, groupItem)
	}

	logs, sub, err := _Election.contract.WatchLogs(opts, "ValidatorGroupVoteActivated", accountRule, groupRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ElectionValidatorGroupVoteActivated)
				if err := _Election.contract.UnpackLog(event, "ValidatorGroupVoteActivated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorGroupVoteActivated is a log parse operation binding the contract event 0x45aac85f38083b18efe2d441a65b9c1ae177c78307cb5a5d4aec8f7dbcaeabfe.
//
// Solidity: event ValidatorGroupVoteActivated(address indexed account, address indexed group, uint256 value, uint256 units)
func (_Election *ElectionFilterer) ParseValidatorGroupVoteActivated(log types.Log) (*ElectionValidatorGroupVoteActivated, error) {
	event := new(ElectionValidatorGroupVoteActivated)
	if err := _Election.contract.UnpackLog(event, "ValidatorGroupVoteActivated", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ElectionValidatorGroupVoteCastIterator is returned from FilterValidatorGroupVoteCast and is used to iterate over the raw logs and unpacked data for ValidatorGroupVoteCast events raised by the Election contract.
type ElectionValidatorGroupVoteCastIterator struct {
	Event *ElectionValidatorGroupVoteCast // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ElectionValidatorGroupVoteCastIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ElectionValidatorGroupVoteCast)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ElectionValidatorGroupVoteCast)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ElectionValidatorGroupVoteCastIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ElectionValidatorGroupVoteCastIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ElectionValidatorGroupVoteCast represents a ValidatorGroupVoteCast event raised by the Election contract.
type ElectionValidatorGroupVoteCast struct {
	Account common.Address
	Group   common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterValidatorGroupVoteCast is a free log retrieval operation binding the contract event 0xd3532f70444893db82221041edb4dc26c94593aeb364b0b14dfc77d5ee905152.
//
// Solidity: event ValidatorGroupVoteCast(address indexed account, address indexed group, uint256 value)
func (_Election *ElectionFilterer) FilterValidatorGroupVoteCast(opts *bind.FilterOpts, account []common.Address, group []common.Address) (*ElectionValidatorGroupVoteCastIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var groupRule []interface{}
	for _, groupItem := range group {
		groupRule = append(groupRule, groupItem)
	}

	logs, sub, err := _Election.contract.FilterLogs(opts, "ValidatorGroupVoteCast", accountRule, groupRule)
	if err != nil {
		return nil, err
	}
	return &ElectionValidatorGroupVoteCastIterator{contract: _Election.contract, event: "ValidatorGroupVoteCast", logs: logs, sub: sub}, nil
}

// WatchValidatorGroupVoteCast is a free log subscription operation binding the contract event 0xd3532f70444893db82221041edb4dc26c94593aeb364b0b14dfc77d5ee905152.
//
// Solidity: event ValidatorGroupVoteCast(address indexed account, address indexed group, uint256 value)
func (_Election *ElectionFilterer) WatchValidatorGroupVoteCast(opts *bind.WatchOpts, sink chan<- *ElectionValidatorGroupVoteCast, account []common.Address, group []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var groupRule []interface{}
	for _, groupItem := range group {
		groupRule = append(groupRule, groupItem)
	}

	logs, sub, err := _Election.contract.WatchLogs(opts, "ValidatorGroupVoteCast", accountRule, groupRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ElectionValidatorGroupVoteCast)
				if err := _Election.contract.UnpackLog(event, "ValidatorGroupVoteCast", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorGroupVoteCast is a log parse operation binding the contract event 0xd3532f70444893db82221041edb4dc26c94593aeb364b0b14dfc77d5ee905152.
//
// Solidity: event ValidatorGroupVoteCast(address indexed account, address indexed group, uint256 value)
func (_Election *ElectionFilterer) ParseValidatorGroupVoteCast(log types.Log) (*ElectionValidatorGroupVoteCast, error) {
	event := new(ElectionValidatorGroupVoteCast)
	if err := _Election.contract.UnpackLog(event, "ValidatorGroupVoteCast", log); err != nil {
		return nil, err
	}
	return event, nil
}
