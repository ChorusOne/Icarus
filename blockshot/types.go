package blockshot

import (
	"database/sql/driver"
	"encoding/json"
	"errors"
	"github.com/ChorusOne/Icarus/blockchain"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"

	_ "github.com/lib/pq"
	"math/big"
)

// Nice Guide : https://www.alexedwards.net/blog/using-postgresql-jsonb

//Transaction struct contains relevant (to Icarus) details of a Celo transaction
type Transaction struct {
	Nonce               uint64          `json:"nonce"`
	GasLimit            uint64          `json:"gasLimit"`
	GasPrice            *big.Int        `json:"gasPrice"`
	GasUsed             uint64          `json:"gasUsed"`
	FeeCurrency         *common.Address `json:"feeCurrency"`
	GatewayFeeRecipient *common.Address `json:"gatewayFeeRecipient"`
	GatewayFee          *big.Int        `json:"gatewayFee"`
	To                  *common.Address `json:"to"`
	Val                 *big.Int        `json:"value"`

	Raw *types.Transaction `json:"raw"`
}

//TransactionFrom creates a Transaction object given a *types.Transaction object and gas details
func TransactionFrom(tx *types.Transaction, gasReceipt *blockchain.GasReceipt) *Transaction {
	transaction := &Transaction{
		Raw:                 tx,
		Nonce:               tx.Nonce(),
		GasLimit:            tx.Gas(),
		GasPrice:            tx.GasPrice(),
		FeeCurrency:         tx.FeeCurrency(),
		GatewayFeeRecipient: tx.GatewayFeeRecipient(),
		GatewayFee:          tx.GatewayFee(),
		To:                  tx.To(),
		Val:                 tx.Value(),

		GasUsed: gasReceipt.GasUsed,
	}

	return transaction

}

//EventLog contains relevant (to Icarus) details of a Celo event log
type EventLog struct {
	BlockLogIndex uint
	TxHash        common.Hash
	TxLogIndex    uint
	// This will be vLog.Topics[0].Hex()
	Topic   string
	Details *types.Log
}

//EventLogFrom generates an EventLog object given a *types.Log object
func EventLogFrom(vLog *types.Log) *EventLog {

	eventLog := &EventLog{
		BlockLogIndex: vLog.Index,
		TxLogIndex:    vLog.TxIndex,
		TxHash:        vLog.TxHash,
		Topic:         vLog.Topics[0].Hex(),
		Details:       vLog,
	}

	return eventLog

}

// Value returns the JSON-encoded representation of the Transaction struct.
func (tx Transaction) Value() (driver.Value, error) {
	return json.Marshal(tx)
}

// Scan decodes a JSON-encoded value into a Transaction struct
func (tx *Transaction) Scan(value interface{}) error {
	b, ok := value.([]byte)
	if !ok {
		return errors.New("type assertion to []byte failed")
	}

	return json.Unmarshal(b, &tx)
}

//Tag represents an Icarus tag on a Celo transaction
type Tag struct {
	Name       string `json:"eventname"`
	prettyName string
	Source     string            `json:"source"`
	Parameters map[string]string `json:"parameters"`
}

//NewTag is a constructor for Tag
func NewTag(name string, prettyName string, source string) *Tag {
	return &Tag{
		Name:       name,
		prettyName: prettyName,
		Source:     source,
		Parameters: make(map[string]string)}

}

//EventLogs is an Icarus wrapper over types.Log to define Value() and Scan()
type EventLogs []*types.Log

// Value returns the JSON-encoded representation of EventLogs
func (eLogs EventLogs) Value() (driver.Value, error) {
	return json.Marshal(eLogs)
}

// Scan decodes a JSON-encoded value to Tags
func (eLogs *EventLogs) Scan(value interface{}) error {
	b, ok := value.([]byte)
	if !ok {
		return errors.New("type assertion to []byte failed")
	}

	return json.Unmarshal(b, &eLogs)
}

//Tags is a type representation for a slice of Tag pointers
type Tags []*Tag

// Value returns the JSON-encoded representation of Tags
func (tags Tags) Value() (driver.Value, error) {
	return json.Marshal(tags)
}

// Scan decodes a JSON-encoded value to Tags
func (tags *Tags) Scan(value interface{}) error {
	b, ok := value.([]byte)
	if !ok {
		return errors.New("type assertion to []byte failed")
	}

	return json.Unmarshal(b, &tags)
}

// Value returns the JSON-encoded representation of the Tag struct.
func (tag Tag) Value() (driver.Value, error) {
	return json.Marshal(tag)
}

// Scan decodes a JSON-encoded value into a Tag struct
func (tag *Tag) Scan(value interface{}) error {
	b, ok := value.([]byte)
	if !ok {
		return errors.New("type assertion to []byte failed")
	}

	return json.Unmarshal(b, &tag)
}

//TransactionDetailed wraps relevant details of a transaction
//including its event logs + tags generated by Icarus for the transaction
type TransactionDetailed struct {
	BlockNumber string      `json:"blockNumber"`
	Timestamp   string      `json:"timestamp"`
	TxHash      string      `json:"hash"`
	Details     Transaction `json:"details"`
	From        string      `json:"from"`
	To          string      `json:"to"`
	ELogs       EventLogs   `json:"logs"`
	Tags        Tags        `json:"tags"`
}

//Types For Different Event Logs - StableToken.sol and GoldToken.sol

//LogTransfer - to capture details from an event log of form Transfer
type LogTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
}

//LogTransferComment - to capture details from an event log of form TransferComment
type LogTransferComment struct {
	Comment string
}

//LogApproval - to capture details from an event log of form Approval
type LogApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
}

//Types For Different Event Logs - LockedGold.sol

//LogGoldLocked - GoldLocked(address indexed account, uint256 value)
type LogGoldLocked struct {
	Account common.Address
	Value   *big.Int
}

//LogGoldUnlocked - GoldUnlocked(address indexed account, uint256 value, uint256 available)
type LogGoldUnlocked struct {
	Account   common.Address
	Value     *big.Int
	Available *big.Int
}

//LogGoldRelocked - GoldRelocked(address indexed account, uint256 value)
type LogGoldRelocked struct {
	Account common.Address
	Value   *big.Int
}

//LogGoldWithdrawn - GoldWithdrawn(address indexed account, uint256 value)
type LogGoldWithdrawn struct {
	Account common.Address
	Value   *big.Int
}

//LogAccountSlashed - AccountSlashed(address indexed slashed, uint256 penalty, address indexed reporter, uint256 reward)
type LogAccountSlashed struct {
	Slashed  common.Address
	Penalty  *big.Int
	Reporter common.Address
	Reward   *big.Int
}

//Types For Different Event Logs - Governance.sol

//LogProposalQueued-  ProposalQueued(uint256 indexed proposalId, address indexed proposer, uint256 transactionCount, uint256 deposit, uint256 timestamp)
type LogProposalQueued struct {
	ProposalId       *big.Int
	Proposer         common.Address
	TransactionCount *big.Int
	Deposit          *big.Int
	Timestamp        *big.Int
}

//LogProposalUpvoted - ProposalUpvoted(uint256 indexed proposalId, address indexed account, uint256 upvotes)
type LogProposalUpvoted struct {
	ProposalId *big.Int
	Account    common.Address
	Upvotes    *big.Int
}

//LogProposalUpvoteRevoked - ProposalUpvoteRevoked(uint256 indexed proposalId, address indexed account, uint256 revokedUpvotes)
type LogProposalUpvoteRevoked struct {
	ProposalId     *big.Int
	Account        common.Address
	RevokedUpvotes *big.Int
}

//LogProposalDequeued - ProposalDequeued(uint256 indexed proposalId, uint256 timestamp)
type LogProposalDequeued struct {
	ProposalId *big.Int
	Timestamp  *big.Int
}

//LogProposalVoted - ProposalVoted(uint256 indexed proposalId, address indexed account, uint256 value, uint256 weight)
type LogProposalVoted struct {
	ProposalId *big.Int
	Account    common.Address
	Value      *big.Int
	Weight     *big.Int
}

//Types For Different Event Logs - GovernanceSlasher.sol

//LogSlashingApproved - SlashingApproved(address indexed account, uint256 amount)
type LogSlashingApproved struct {
	Account common.Address
	Amount  *big.Int
}

//LogGovernanceSlashPerformed - GovernanceSlashPerformed(address indexed account, uint256 amount)
type LogGovernanceSlashPerformed struct {
	Account common.Address
	Amount  *big.Int
}

//Types For Different Event Logs - Election.sol

//LogValidatorGroupVoteCast - ValidatorGroupVoteCast(address indexed account, address indexed group, uint256 value)
type LogValidatorGroupVoteCast struct {
	Account common.Address
	Group   common.Address
	Value   *big.Int
}

//LogValidatorGroupPendingVoteRevoked - ValidatorGroupPendingVoteRevoked(address indexed account, address indexed group, uint256 value)
type LogValidatorGroupPendingVoteRevoked struct {
	Account common.Address
	Group   common.Address
	Value   *big.Int
}

//LogValidatorGroupVoteActivated - ValidatorGroupVoteActivated(address indexed account, address indexed group, uint256 value, uint256 units)
type LogValidatorGroupVoteActivated struct {
	Account common.Address
	Group   common.Address
	Value   *big.Int
	Units   *big.Int
}

//LogValidatorGroupActiveVoteRevoked - ValidatorGroupActiveVoteRevoked(address indexed account, address indexed group, uint256 value, uint256 units)
type LogValidatorGroupActiveVoteRevoked struct {
	Account common.Address
	Group   common.Address
	Value   *big.Int
	Units   *big.Int
}
